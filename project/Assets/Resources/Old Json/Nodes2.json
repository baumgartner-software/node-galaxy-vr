{
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/BoundedLocalCacheTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/BoundedLocalCacheTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest"
        ],
        "label": "BoundedLocalCacheTest.java",
        "text": "BoundedLocalCacheTest.java",
        "color": "#636363",
        "additional": "BoundedLocalCacheTest.java",
        "position": {
            "x": -0.21399253602529267,
            "y": 1.3656616677113678,
            "z": 1.6344819097275052
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/EvictionTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/EvictionTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest"
        ],
        "label": "EvictionTest.java",
        "text": "EvictionTest.java",
        "color": "#636363",
        "additional": "EvictionTest.java",
        "position": {
            "x": 0.15375796033406441,
            "y": 1.6925169757585155,
            "z": 1.2793924944336292
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/CacheWriter.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/CacheWriter.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter"
        ],
        "label": "CacheWriter.java",
        "text": "CacheWriter.java",
        "color": "#636363",
        "additional": "CacheWriter.java",
        "position": {
            "x": 0.4127503253117202,
            "y": 1.711285343299152,
            "z": 0.9711303307313789
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/RemovalListener.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/RemovalListener.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener"
        ],
        "label": "RemovalListener.java",
        "text": "RemovalListener.java",
        "color": "#636363",
        "additional": "RemovalListener.java",
        "position": {
            "x": 0.4754886598510699,
            "y": 1.8113802493142552,
            "z": 0.9010028801227745
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Caffeine.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Caffeine.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine"
        ],
        "label": "Caffeine.java",
        "text": "Caffeine.java",
        "color": "#636363",
        "additional": "Caffeine.java",
        "position": {
            "x": 0.16807121334395414,
            "y": 1.4519038426149864,
            "z": 1.2142544265628972
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/CaffeineSpecTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/CaffeineSpecTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest"
        ],
        "label": "CaffeineSpecTest.java",
        "text": "CaffeineSpecTest.java",
        "color": "#636363",
        "additional": "CaffeineSpecTest.java",
        "position": {
            "x": -0.3422940362101614,
            "y": 1.5908299388084874,
            "z": 1.9361270966839033
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterAccessTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterAccessTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest"
        ],
        "label": "ExpireAfterAccessTest.java",
        "text": "ExpireAfterAccessTest.java",
        "color": "#636363",
        "additional": "ExpireAfterAccessTest.java",
        "position": {
            "x": 0.7474612871462616,
            "y": 1.5227885421480432,
            "z": 2.091608151995093
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterVarTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterVarTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest"
        ],
        "label": "ExpireAfterVarTest.java",
        "text": "ExpireAfterVarTest.java",
        "color": "#636363",
        "additional": "ExpireAfterVarTest.java",
        "position": {
            "x": -0.50669997738932,
            "y": 1.4379276986541116,
            "z": 1.4218350792080905
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterWriteTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/ExpireAfterWriteTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest"
        ],
        "label": "ExpireAfterWriteTest.java",
        "text": "ExpireAfterWriteTest.java",
        "color": "#636363",
        "additional": "ExpireAfterWriteTest.java",
        "position": {
            "x": 0.8300573543974588,
            "y": 1.4193526750713374,
            "z": 1.7145586218867808
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Expiry.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Expiry.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry"
        ],
        "label": "Expiry.java",
        "text": "Expiry.java",
        "color": "#636363",
        "additional": "Expiry.java",
        "position": {
            "x": -0.4442111507240334,
            "y": 1.5530804063526313,
            "z": 2.5
        }
    },
    "caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache/LocalCacheFactoryGenerator.java": {
        "id": "caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache/LocalCacheFactoryGenerator.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator"
        ],
        "label": "LocalCacheFactoryGenerator.java",
        "text": "LocalCacheFactoryGenerator.java",
        "color": "#636363",
        "additional": "LocalCacheFactoryGenerator.java",
        "position": {
            "x": -0.4156692651348276,
            "y": 1.4637062104022114,
            "z": 0.5830470459692206
        }
    },
    "caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache/NodeFactoryGenerator.java": {
        "id": "caffeine/src/javaPoet/java/com/github/benmanes/caffeine/cache/NodeFactoryGenerator.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator"
        ],
        "label": "NodeFactoryGenerator.java",
        "text": "NodeFactoryGenerator.java",
        "color": "#636363",
        "additional": "NodeFactoryGenerator.java",
        "position": {
            "x": -0.405729846747345,
            "y": 1.2606260155134688,
            "z": 0.649689870547038
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Pacer.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Pacer.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer"
        ],
        "label": "Pacer.java",
        "text": "Pacer.java",
        "color": "#636363",
        "additional": "Pacer.java",
        "position": {
            "x": -0.09740121029623183,
            "y": 2.3139139889702753,
            "z": 0.9483546651020851
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Scheduler.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Scheduler.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler"
        ],
        "label": "Scheduler.java",
        "text": "Scheduler.java",
        "color": "#636363",
        "additional": "Scheduler.java",
        "position": {
            "x": 0.029375206558425848,
            "y": 2.5,
            "z": 1.0843564802896695
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Policy.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/Policy.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration"
        ],
        "label": "Policy.java",
        "text": "Policy.java",
        "color": "#636363",
        "additional": "Policy.java",
        "position": {
            "x": -0.357894667096068,
            "y": 1.9962757380279768,
            "z": 1.9744800215543712
        }
    },
    "guava/src/test/java/com/github/benmanes/caffeine/cache/QueueSanityTest.java": {
        "id": "guava/src/test/java/com/github/benmanes/caffeine/cache/QueueSanityTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest"
        ],
        "label": "QueueSanityTest.java",
        "text": "QueueSanityTest.java",
        "color": "#636363",
        "additional": "QueueSanityTest.java",
        "position": {
            "x": 0.46764958778127297,
            "y": 1.3973536606320938,
            "z": 0.5
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/RefreshAfterWriteTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/RefreshAfterWriteTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest"
        ],
        "label": "RefreshAfterWriteTest.java",
        "text": "RefreshAfterWriteTest.java",
        "color": "#636363",
        "additional": "RefreshAfterWriteTest.java",
        "position": {
            "x": 0.3016075881175768,
            "y": 0.5215263707380289,
            "z": 1.5322295657102198
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/TimerWheelTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/TimerWheelTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest"
        ],
        "label": "TimerWheelTest.java",
        "text": "TimerWheelTest.java",
        "color": "#636363",
        "additional": "TimerWheelTest.java",
        "position": {
            "x": -0.08965848103284735,
            "y": 1.7827157840679144,
            "z": 1.4392760020557995
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/MpscGrowableArrayQueue.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/MpscGrowableArrayQueue.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess"
        ],
        "label": "MpscGrowableArrayQueue.java",
        "text": "MpscGrowableArrayQueue.java",
        "color": "#636363",
        "additional": "MpscGrowableArrayQueue.java",
        "position": {
            "x": 0.21164184168912614,
            "y": 2.1383208565884346,
            "z": 0.7167138452641075
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/issues/Issue30Test.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/issues/Issue30Test.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test"
        ],
        "label": "Issue30Test.java",
        "text": "Issue30Test.java",
        "color": "#636363",
        "additional": "Issue30Test.java",
        "position": {
            "x": 0.9335405513535913,
            "y": 0.879790573754641,
            "z": 1.6299120731480943
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/Synthetic.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/Synthetic.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic"
        ],
        "label": "Synthetic.java",
        "text": "Synthetic.java",
        "color": "#636363",
        "additional": "Synthetic.java",
        "position": {
            "x": -0.13880834969408362,
            "y": 2.170462772537259,
            "z": 2.326869800878511
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCache.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCache.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache"
        ],
        "label": "TinyCache.java",
        "text": "TinyCache.java",
        "color": "#636363",
        "additional": "TinyCache.java",
        "position": {
            "x": 0.08556658539774231,
            "y": 1.0830317300886656,
            "z": 1.686066941196567
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCacheSketch.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCacheSketch.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch"
        ],
        "label": "TinyCacheSketch.java",
        "text": "TinyCacheSketch.java",
        "color": "#636363",
        "additional": "TinyCacheSketch.java",
        "position": {
            "x": 0.03874638316641943,
            "y": 1.0321642381485696,
            "z": 1.6108366025351717
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCacheWithGhostCache.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinyCacheWithGhostCache.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache"
        ],
        "label": "TinyCacheWithGhostCache.java",
        "text": "TinyCacheWithGhostCache.java",
        "color": "#636363",
        "additional": "TinyCacheWithGhostCache.java",
        "position": {
            "x": -0.0246747245980381,
            "y": 1.0082852459838816,
            "z": 1.7394147655733192
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinySetIndexing.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/admission/tinycache/TinySetIndexing.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing"
        ],
        "label": "TinySetIndexing.java",
        "text": "TinySetIndexing.java",
        "color": "#636363",
        "additional": "TinySetIndexing.java",
        "position": {
            "x": -0.8867336811364681,
            "y": 1.4914847319165565,
            "z": 0.92182036282792
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/stats/CacheStats.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/stats/CacheStats.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats"
        ],
        "label": "CacheStats.java",
        "text": "CacheStats.java",
        "color": "#636363",
        "additional": "CacheStats.java",
        "position": {
            "x": 0.1160863617727339,
            "y": 1.0256659734423175,
            "z": 0.8692399462692941
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/stats/CacheStatsTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/stats/CacheStatsTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest"
        ],
        "label": "CacheStatsTest.java",
        "text": "CacheStatsTest.java",
        "color": "#636363",
        "additional": "CacheStatsTest.java",
        "position": {
            "x": 0.16611184639931764,
            "y": 1.1132341684372693,
            "z": 0.8403527400107744
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/PolicyStats.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/PolicyStats.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats"
        ],
        "label": "PolicyStats.java",
        "text": "PolicyStats.java",
        "color": "#636363",
        "additional": "PolicyStats.java",
        "position": {
            "x": -0.018791858022220387,
            "y": 1.1558973330289992,
            "z": 0.9387357539011811
        }
    },
    "jcache/src/main/java/com/github/benmanes/caffeine/jcache/event/EventDispatcher.java": {
        "id": "jcache/src/main/java/com/github/benmanes/caffeine/jcache/event/EventDispatcher.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher"
        ],
        "label": "EventDispatcher.java",
        "text": "EventDispatcher.java",
        "color": "#636363",
        "additional": "EventDispatcher.java",
        "position": {
            "x": 0.462569096393427,
            "y": 1.8703755777195923,
            "z": 1.3501356216056444
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/testing/DescriptionBuilder.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/testing/DescriptionBuilder.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder"
        ],
        "label": "DescriptionBuilder.java",
        "text": "DescriptionBuilder.java",
        "color": "#636363",
        "additional": "DescriptionBuilder.java",
        "position": {
            "x": 0.6904109020647227,
            "y": 1.8008892369965093,
            "z": 0.8204928042582447
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/SingleConsumerQueueTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/SingleConsumerQueueTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest"
        ],
        "label": "SingleConsumerQueueTest.java",
        "text": "SingleConsumerQueueTest.java",
        "color": "#636363",
        "additional": "SingleConsumerQueueTest.java",
        "position": {
            "x": 0.8835201897555174,
            "y": 2.045416457427718,
            "z": 1.090663208908428
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/MpscGrowableArrayQueueTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/MpscGrowableArrayQueueTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest"
        ],
        "label": "MpscGrowableArrayQueueTest.java",
        "text": "MpscGrowableArrayQueueTest.java",
        "color": "#636363",
        "additional": "MpscGrowableArrayQueueTest.java",
        "position": {
            "x": 0.7802510120233104,
            "y": 2.2272584397149133,
            "z": 1.1727457155649543
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/base/UnsafeAccess.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/base/UnsafeAccess.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess"
        ],
        "label": "UnsafeAccess.java",
        "text": "UnsafeAccess.java",
        "color": "#636363",
        "additional": "UnsafeAccess.java",
        "position": {
            "x": 0.4095773915971359,
            "y": 1.4964806750892716,
            "z": 2.3578843227732866
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/UnsafeAccess.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/UnsafeAccess.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess"
        ],
        "label": "UnsafeAccess.java",
        "text": "UnsafeAccess.java",
        "color": "#636363",
        "additional": "UnsafeAccess.java",
        "position": {
            "x": 0.4402146387979382,
            "y": 1.3062167781253888,
            "z": 2.4223492553024144
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/base/UnsafeAccessTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/base/UnsafeAccessTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields"
        ],
        "label": "UnsafeAccessTest.java",
        "text": "UnsafeAccessTest.java",
        "color": "#636363",
        "additional": "UnsafeAccessTest.java",
        "position": {
            "x": -0.6971236482399072,
            "y": 1.0317476984173757,
            "z": 2.005338996094353
        }
    },
    "caffeine/src/test/java/com/github/benmanes/caffeine/cache/UnsafeAccessTest.java": {
        "id": "caffeine/src/test/java/com/github/benmanes/caffeine/cache/UnsafeAccessTest.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields"
        ],
        "label": "UnsafeAccessTest.java",
        "text": "UnsafeAccessTest.java",
        "color": "#636363",
        "additional": "UnsafeAccessTest.java",
        "position": {
            "x": -0.6728868683099102,
            "y": 0.8656448203137745,
            "z": 1.8810600721568225
        }
    },
    "caffeine/src/main/java/com/github/benmanes/caffeine/cache/CaffeineSpec.java": {
        "id": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/CaffeineSpec.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec"
        ],
        "label": "CaffeineSpec.java",
        "text": "CaffeineSpec.java",
        "color": "#636363",
        "additional": "CaffeineSpec.java",
        "position": {
            "x": -0.09237010218971164,
            "y": 1.3970107174542763,
            "z": 1.0877711744565413
        }
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/ComputeBenchmark.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/ComputeBenchmark.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark"
        ],
        "label": "ComputeBenchmark.java",
        "text": "ComputeBenchmark.java",
        "color": "#636363",
        "additional": "ComputeBenchmark.java",
        "position": {
            "x": 0.6656618023347882,
            "y": 1.753796828906018,
            "z": 1.7010834736118197
        }
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/profiler/CacheProfiler.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/profiler/CacheProfiler.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler"
        ],
        "label": "CacheProfiler.java",
        "text": "CacheProfiler.java",
        "color": "#636363",
        "additional": "CacheProfiler.java",
        "position": {
            "x": 0.6647865708814495,
            "y": 1.9505709565690095,
            "z": 1.778676052063013
        }
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/FrequencySketchBenchmark.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/FrequencySketchBenchmark.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark"
        ],
        "label": "FrequencySketchBenchmark.java",
        "text": "FrequencySketchBenchmark.java",
        "color": "#636363",
        "additional": "FrequencySketchBenchmark.java",
        "position": {
            "x": -0.22604558915610262,
            "y": 1.3214610842775014,
            "z": 2.2095668379222624
        }
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/GetPutBenchmark.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/GetPutBenchmark.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark"
        ],
        "label": "GetPutBenchmark.java",
        "text": "GetPutBenchmark.java",
        "color": "#636363",
        "additional": "GetPutBenchmark.java",
        "position": {
            "x": -0.39015913813823044,
            "y": 1.2297808906520142,
            "z": 2.2014953718171473
        }
    },
    "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/PutRemoveBenchmark.java": {
        "id": "caffeine/src/jmh/java/com/github/benmanes/caffeine/cache/PutRemoveBenchmark.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark"
        ],
        "label": "PutRemoveBenchmark.java",
        "text": "PutRemoveBenchmark.java",
        "color": "#636363",
        "additional": "PutRemoveBenchmark.java",
        "position": {
            "x": -0.3915644168965632,
            "y": 1.399238042442963,
            "z": 2.1575664511673205
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/FrdPolicy.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/FrdPolicy.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node"
        ],
        "label": "FrdPolicy.java",
        "text": "FrdPolicy.java",
        "color": "#636363",
        "additional": "FrdPolicy.java",
        "position": {
            "x": -0.791462234491456,
            "y": 1.7156256782319492,
            "z": 1.0533384927988982
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/HillClimberFrdPolicy.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/HillClimberFrdPolicy.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node"
        ],
        "label": "HillClimberFrdPolicy.java",
        "text": "HillClimberFrdPolicy.java",
        "color": "#636363",
        "additional": "HillClimberFrdPolicy.java",
        "position": {
            "x": -0.7473209526911302,
            "y": 1.6191743394743905,
            "z": 1.043387503314758
        }
    },
    "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/IndicatorFrdPolicy.java": {
        "id": "simulator/src/main/java/com/github/benmanes/caffeine/cache/simulator/policy/irr/IndicatorFrdPolicy.java",
        "size": 4,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node"
        ],
        "label": "IndicatorFrdPolicy.java",
        "text": "IndicatorFrdPolicy.java",
        "color": "#636363",
        "additional": "IndicatorFrdPolicy.java",
        "position": {
            "x": -0.6726399265400114,
            "y": 1.6697746139224805,
            "z": 0.9499149735453163
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)"
        ],
        "label": "BoundedLocalCacheTest",
        "text": "BoundedLocalCacheTest",
        "color": "#6D6921",
        "additional": "BoundedLocalCacheTest",
        "position": {
            "x": -0.19876670735531665,
            "y": 1.3767094394243982,
            "z": 1.5956599477676046
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)"
        ],
        "label": "EvictionTest",
        "text": "EvictionTest",
        "color": "#6D6921",
        "additional": "EvictionTest",
        "position": {
            "x": 0.14158908688234084,
            "y": 1.6782364158889134,
            "z": 1.3160331261325329
        }
    },
    "com.github.benmanes.caffeine.cache.CacheWriter": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)"
        ],
        "label": "CacheWriter",
        "text": "CacheWriter",
        "color": "#6D6921",
        "additional": "CacheWriter",
        "position": {
            "x": 0.3952730348781788,
            "y": 1.703678326556314,
            "z": 0.9303157569374764
        }
    },
    "com.github.benmanes.caffeine.cache.RemovalListener": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)"
        ],
        "label": "RemovalListener",
        "text": "RemovalListener",
        "color": "#6D6921",
        "additional": "RemovalListener",
        "position": {
            "x": 0.44931399804737526,
            "y": 1.7761033956248866,
            "z": 0.8744240288014146
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/initialCapacity",
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumSize",
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumWeight",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)"
        ],
        "label": "Caffeine",
        "text": "Caffeine",
        "color": "#6D6921",
        "additional": "Caffeine",
        "position": {
            "x": 0.19966848175385188,
            "y": 1.4848150223850647,
            "z": 1.2261731477209081
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)"
        ],
        "label": "CaffeineSpecTest",
        "text": "CaffeineSpecTest",
        "color": "#6D6921",
        "additional": "CaffeineSpecTest",
        "position": {
            "x": -0.3420017308934057,
            "y": 1.6506373737340172,
            "z": 1.935268073800551
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)"
        ],
        "label": "ExpireAfterAccessTest",
        "text": "ExpireAfterAccessTest",
        "color": "#6D6921",
        "additional": "ExpireAfterAccessTest",
        "position": {
            "x": 0.7741024343253493,
            "y": 1.5627050316710909,
            "z": 2.069423247814094
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)"
        ],
        "label": "ExpireAfterVarTest",
        "text": "ExpireAfterVarTest",
        "color": "#6D6921",
        "additional": "ExpireAfterVarTest",
        "position": {
            "x": -0.46747774743484594,
            "y": 1.465955219880594,
            "z": 1.4485375878071658
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)"
        ],
        "label": "ExpireAfterWriteTest",
        "text": "ExpireAfterWriteTest",
        "color": "#6D6921",
        "additional": "ExpireAfterWriteTest",
        "position": {
            "x": 0.8484103777907581,
            "y": 1.4214182808254023,
            "z": 1.6724028846912804
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry": {
        "id": "com.github.benmanes.caffeine.cache.Expiry",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)"
        ],
        "label": "Expiry",
        "text": "Expiry",
        "color": "#6D6921",
        "additional": "Expiry",
        "position": {
            "x": -0.4835373552117168,
            "y": 1.5447582518720009,
            "z": 2.4763786548028657
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/timeZone",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/directory",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/featureByIndex",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)"
        ],
        "label": "LocalCacheFactoryGenerator",
        "text": "LocalCacheFactoryGenerator",
        "color": "#6D6921",
        "additional": "LocalCacheFactoryGenerator",
        "position": {
            "x": -0.408696952166237,
            "y": 1.40531777926285,
            "z": 0.5870610033291135
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/timeZone",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/directory",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/featureByIndex",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)"
        ],
        "label": "NodeFactoryGenerator",
        "text": "NodeFactoryGenerator",
        "color": "#6D6921",
        "additional": "NodeFactoryGenerator",
        "position": {
            "x": -0.4013684805838573,
            "y": 1.3098570426112819,
            "z": 0.6269295544585665
        }
    },
    "com.github.benmanes.caffeine.cache.Pacer": {
        "id": "com.github.benmanes.caffeine.cache.Pacer",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)"
        ],
        "label": "Pacer",
        "text": "Pacer",
        "color": "#6D6921",
        "additional": "Pacer",
        "position": {
            "x": -0.06042958766386708,
            "y": 2.3374036257339217,
            "z": 0.9674436686815739
        }
    },
    "com.github.benmanes.caffeine.cache.Scheduler": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)"
        ],
        "label": "Scheduler",
        "text": "Scheduler",
        "color": "#6D6921",
        "additional": "Scheduler",
        "position": {
            "x": 0.02396651937886185,
            "y": 2.4706311041122464,
            "z": 1.0457382996850408
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)"
        ],
        "label": "VarExpiration",
        "text": "VarExpiration",
        "color": "#6D6921",
        "additional": "VarExpiration",
        "position": {
            "x": -0.3230816197502444,
            "y": 1.9492913135256646,
            "z": 1.9807222289025703
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)"
        ],
        "label": "QueueSanityTest",
        "text": "QueueSanityTest",
        "color": "#6D6921",
        "additional": "QueueSanityTest",
        "position": {
            "x": 0.4924260159799021,
            "y": 1.3583973259374926,
            "z": 0.5242610276208587
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)"
        ],
        "label": "RefreshAfterWriteTest",
        "text": "RefreshAfterWriteTest",
        "color": "#6D6921",
        "additional": "RefreshAfterWriteTest",
        "position": {
            "x": 0.3412790561912986,
            "y": 0.534830882050772,
            "z": 1.549482265910807
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)"
        ],
        "label": "TimerWheelTest",
        "text": "TimerWheelTest",
        "color": "#6D6921",
        "additional": "TimerWheelTest",
        "position": {
            "x": -0.10402675226676383,
            "y": 1.7489061139183046,
            "z": 1.4109417625776168
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)"
        ],
        "label": "UnsafeRefArrayAccess",
        "text": "UnsafeRefArrayAccess",
        "color": "#6D6921",
        "additional": "UnsafeRefArrayAccess",
        "position": {
            "x": 0.21453667454004965,
            "y": 2.09314046333035,
            "z": 0.6902954379225076
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)"
        ],
        "label": "Issue30Test",
        "text": "Issue30Test",
        "color": "#6D6921",
        "additional": "Issue30Test",
        "position": {
            "x": 0.9513368752710161,
            "y": 0.9150811448953531,
            "z": 1.6595022281181677
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)"
        ],
        "label": "Synthetic",
        "text": "Synthetic",
        "color": "#6D6921",
        "additional": "Synthetic",
        "position": {
            "x": -0.14533842554802767,
            "y": 2.118221192846895,
            "z": 2.3241398825514272
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/cache",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)"
        ],
        "label": "TinyCache",
        "text": "TinyCache",
        "color": "#6D6921",
        "additional": "TinyCache",
        "position": {
            "x": 0.04340092392075201,
            "y": 1.0615543469337936,
            "z": 1.6902614341023126
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)"
        ],
        "label": "TinyCacheSketch",
        "text": "TinyCacheSketch",
        "color": "#6D6921",
        "additional": "TinyCacheSketch",
        "position": {
            "x": 0.014811861655467773,
            "y": 1.0412843584394045,
            "z": 1.6463999101230695
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/cache",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)"
        ],
        "label": "TinyCacheWithGhostCache",
        "text": "TinyCacheWithGhostCache",
        "color": "#6D6921",
        "additional": "TinyCacheWithGhostCache",
        "position": {
            "x": -0.005513937854569884,
            "y": 1.0351714065853157,
            "z": 1.7054017636307035
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)"
        ],
        "label": "TinySetIndexing",
        "text": "TinySetIndexing",
        "color": "#6D6921",
        "additional": "TinySetIndexing",
        "position": {
            "x": -0.9184158048415304,
            "y": 1.517777758097827,
            "z": 0.9475321945800035
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)"
        ],
        "label": "CacheStats",
        "text": "CacheStats",
        "color": "#6D6921",
        "additional": "CacheStats",
        "position": {
            "x": 0.1361447272140286,
            "y": 1.0531461101353385,
            "z": 0.9060091017504965
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)"
        ],
        "label": "CacheStatsTest",
        "text": "CacheStatsTest",
        "color": "#6D6921",
        "additional": "CacheStatsTest",
        "position": {
            "x": 0.16298181746389862,
            "y": 1.1037733883387966,
            "z": 0.8885270574353843
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/hitCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/missCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/evictionCount"
        ],
        "label": "PolicyStats",
        "text": "PolicyStats",
        "color": "#6D6921",
        "additional": "PolicyStats",
        "position": {
            "x": 0.026320124097353848,
            "y": 1.1392213829036453,
            "z": 0.9491957008516103
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)"
        ],
        "label": "EventDispatcher",
        "text": "EventDispatcher",
        "color": "#6D6921",
        "additional": "EventDispatcher",
        "position": {
            "x": 0.48402556809271036,
            "y": 1.8253486346110805,
            "z": 1.3361142274882458
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)"
        ],
        "label": "DescriptionBuilder",
        "text": "DescriptionBuilder",
        "color": "#6D6921",
        "additional": "DescriptionBuilder",
        "position": {
            "x": 0.6637232175722378,
            "y": 1.781656074017692,
            "z": 0.7890293035889475
        }
    },
    "com.github.benmanes.caffeine.SingleConsumerQueueTest": {
        "id": "com.github.benmanes.caffeine.SingleConsumerQueueTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/NUM_PRODUCERS",
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/POPULATED_SIZE",
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/PRODUCE"
        ],
        "label": "SingleConsumerQueueTest",
        "text": "SingleConsumerQueueTest",
        "color": "#6D6921",
        "additional": "SingleConsumerQueueTest",
        "position": {
            "x": 0.8649809265807495,
            "y": 2.090123821871083,
            "z": 1.110576282685407
        }
    },
    "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest": {
        "id": "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/NUM_PRODUCERS",
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/POPULATED_SIZE",
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/PRODUCE"
        ],
        "label": "SingleConsumerQueueTest",
        "text": "SingleConsumerQueueTest",
        "color": "#6D6921",
        "additional": "SingleConsumerQueueTest",
        "position": {
            "x": 0.8070436614377074,
            "y": 2.187944385300538,
            "z": 1.1559009520582841
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccess": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccess",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/UNSAFE",
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/ANDROID",
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/OPEN_JDK"
        ],
        "label": "UnsafeAccess",
        "text": "UnsafeAccess",
        "color": "#6D6921",
        "additional": "UnsafeAccess",
        "position": {
            "x": 0.4395755199515985,
            "y": 1.456856150069937,
            "z": 2.3594780749817215
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccess": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccess",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/UNSAFE",
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/ANDROID",
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/OPEN_JDK"
        ],
        "label": "UnsafeAccess",
        "text": "UnsafeAccess",
        "color": "#6D6921",
        "additional": "UnsafeAccess",
        "position": {
            "x": 0.44526496211295474,
            "y": 1.3555803455060504,
            "z": 2.4027546816739056
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/lvalue",
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET",
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET",
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/ivalue"
        ],
        "label": "RelaxedFields",
        "text": "RelaxedFields",
        "color": "#6D6921",
        "additional": "RelaxedFields",
        "position": {
            "x": -0.6874251713536335,
            "y": 0.9859088182013518,
            "z": 1.981309235740441
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/lvalue",
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET",
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET",
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/ivalue"
        ],
        "label": "RelaxedFields",
        "text": "RelaxedFields",
        "color": "#6D6921",
        "additional": "RelaxedFields",
        "position": {
            "x": -0.6784764685487956,
            "y": 0.8989889997656322,
            "z": 1.915496644474428
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpec",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/initialCapacity",
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumSize",
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumWeight"
        ],
        "label": "Caffeine",
        "text": "Caffeine",
        "color": "#6D6921",
        "additional": "Caffeine",
        "position": {
            "x": -0.046939120347026075,
            "y": 1.4094549795858515,
            "z": 1.1128171458125293
        }
    },
    "com.github.benmanes.caffeine.cache.ComputeBenchmark": {
        "id": "com.github.benmanes.caffeine.cache.ComputeBenchmark",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/ITEMS"
        ],
        "label": "ComputeBenchmark",
        "text": "ComputeBenchmark",
        "color": "#6D6921",
        "additional": "ComputeBenchmark",
        "position": {
            "x": 0.6725286099471006,
            "y": 1.8085167050241555,
            "z": 1.7094745660703643
        }
    },
    "com.github.benmanes.caffeine.profiler.CacheProfiler": {
        "id": "com.github.benmanes.caffeine.profiler.CacheProfiler",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/MASK",
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/SIZE",
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/ITEMS"
        ],
        "label": "ComputeBenchmark",
        "text": "ComputeBenchmark",
        "color": "#6D6921",
        "additional": "ComputeBenchmark",
        "position": {
            "x": 0.672312606855153,
            "y": 1.906713994323298,
            "z": 1.7535420423990575
        }
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE"
        ],
        "label": "FrequencySketchBenchmark",
        "text": "FrequencySketchBenchmark",
        "color": "#6D6921",
        "additional": "FrequencySketchBenchmark",
        "position": {
            "x": -0.27033019445992634,
            "y": 1.3103846827049723,
            "z": 2.203613148277463
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cacheType",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cache"
        ],
        "label": "FrequencySketchBenchmark",
        "text": "FrequencySketchBenchmark",
        "color": "#6D6921",
        "additional": "FrequencySketchBenchmark",
        "position": {
            "x": -0.36355154235643794,
            "y": 1.2742717705831272,
            "z": 2.189945554135696
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cacheType",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cache"
        ],
        "label": "FrequencySketchBenchmark",
        "text": "FrequencySketchBenchmark",
        "color": "#6D6921",
        "additional": "FrequencySketchBenchmark",
        "position": {
            "x": -0.3666435034974084,
            "y": 1.3516056001073424,
            "z": 2.1667804492501723
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key"
        ],
        "label": "Node",
        "text": "Node",
        "color": "#6D6921",
        "additional": "Node",
        "position": {
            "x": -0.770236061724588,
            "y": 1.7041154142165114,
            "z": 1.0155174723869491
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key"
        ],
        "label": "Node",
        "text": "Node",
        "color": "#6D6921",
        "additional": "Node",
        "position": {
            "x": -0.7452152753619209,
            "y": 1.6404815015151903,
            "z": 1.0035402622626073
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node",
        "size": 3,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key"
        ],
        "label": "Node",
        "text": "Node",
        "color": "#6D6921",
        "additional": "Node",
        "position": {
            "x": -0.7080783299582696,
            "y": 1.6848716582294223,
            "z": 0.9731242003711568
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "drain_blocksOrderedMap",
        "text": "drain_blocksOrderedMap",
        "color": "#CBCBAE",
        "additional": "drain_blocksOrderedMap",
        "position": {
            "x": 0.28093745071618215,
            "y": 1.2703657400365898,
            "z": 1.4475172633926023
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_increase_max",
        "text": "maximumSize_increase_max",
        "color": "#CBCBAE",
        "additional": "maximumSize_increase_max",
        "position": {
            "x": 0.30030242408090224,
            "y": 1.288508268276482,
            "z": 1.412788924993762
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "evict",
        "text": "evict",
        "color": "#CBCBAE",
        "additional": "evict",
        "position": {
            "x": 0.31998525382163745,
            "y": 1.286485427644716,
            "z": 1.4456942172903946
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_decrease_min",
        "text": "maximumSize_decrease_min",
        "color": "#CBCBAE",
        "additional": "maximumSize_decrease_min",
        "position": {
            "x": 0.3177491869418525,
            "y": 1.2672203217351599,
            "z": 1.4294238477946095
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "weightOf_absent",
        "text": "weightOf_absent",
        "color": "#CBCBAE",
        "additional": "weightOf_absent",
        "position": {
            "x": 0.34740011699622886,
            "y": 1.2976590253777593,
            "z": 1.4328886764754891
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_decrease",
        "text": "maximumSize_decrease",
        "color": "#CBCBAE",
        "additional": "maximumSize_decrease",
        "position": {
            "x": 0.3428450901712552,
            "y": 1.3004657995367666,
            "z": 1.4071791114639562
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_increase",
        "text": "maximumSize_increase",
        "color": "#CBCBAE",
        "additional": "maximumSize_increase",
        "position": {
            "x": 0.31638756621560216,
            "y": 1.2707892125439337,
            "z": 1.4084702809745089
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "weightedSize",
        "text": "weightedSize",
        "color": "#CBCBAE",
        "additional": "weightedSize",
        "position": {
            "x": 0.31851878388163923,
            "y": 1.3035025071491244,
            "z": 1.4180190585993762
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "coldest_snapshot",
        "text": "coldest_snapshot",
        "color": "#CBCBAE",
        "additional": "coldest_snapshot",
        "position": {
            "x": 0.375357884246003,
            "y": 1.2790619941855734,
            "z": 1.4433754847714941
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "hottest_snapshot",
        "text": "hottest_snapshot",
        "color": "#CBCBAE",
        "additional": "hottest_snapshot",
        "position": {
            "x": 0.34874399872600836,
            "y": 1.2797894919426314,
            "z": 1.4529174277736372
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "weightOf",
        "text": "weightOf",
        "color": "#CBCBAE",
        "additional": "weightOf",
        "position": {
            "x": 0.37421118879513426,
            "y": 1.2938025419128616,
            "z": 1.4238252163100502
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "maximumSize_decrease_negative",
        "text": "maximumSize_decrease_negative",
        "color": "#CBCBAE",
        "additional": "maximumSize_decrease_negative",
        "position": {
            "x": 0.35164810254769363,
            "y": 1.267491401070993,
            "z": 1.4255814447935473
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect"
        ],
        "label": "checkReorder",
        "text": "checkReorder",
        "color": "#CBCBAE",
        "additional": "checkReorder",
        "position": {
            "x": -0.5434394395640355,
            "y": 1.4684940993249964,
            "z": 1.7003823203274442
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect",
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect"
        ],
        "label": "checkEvict",
        "text": "checkEvict",
        "color": "#CBCBAE",
        "additional": "checkEvict",
        "position": {
            "x": -0.5477191655736053,
            "y": 1.4471694888408408,
            "z": 1.6970703596093923
        }
    },
    "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause"
        ],
        "label": "delete",
        "text": "delete",
        "color": "#CBCBAE",
        "additional": "delete",
        "position": {
            "x": 0.38779142872883576,
            "y": 1.7031810672341112,
            "z": 0.8777072070455544
        }
    },
    "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause",
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause"
        ],
        "label": "onRemoval",
        "text": "onRemoval",
        "color": "#CBCBAE",
        "additional": "onRemoval",
        "position": {
            "x": 0.4123920665454395,
            "y": 1.7295142469606553,
            "z": 0.8528627803601292
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args"
        ],
        "label": "requireArgument",
        "text": "requireArgument",
        "color": "#CBCBAE",
        "additional": "requireArgument",
        "position": {
            "x": 0.39511448817332995,
            "y": 1.5418296504269995,
            "z": 1.3063043201375166
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args",
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args"
        ],
        "label": "requireState",
        "text": "requireState",
        "color": "#CBCBAE",
        "additional": "requireState",
        "position": {
            "x": 0.3871339655052175,
            "y": 1.562090891093661,
            "z": 1.3149461683762353
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkInitialCapacity",
        "text": "checkInitialCapacity",
        "color": "#CBCBAE",
        "additional": "checkInitialCapacity",
        "position": {
            "x": -0.3567435201529503,
            "y": 1.812219906240801,
            "z": 1.951493317136636
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkExpireAfterAccess",
        "text": "checkExpireAfterAccess",
        "color": "#CBCBAE",
        "additional": "checkExpireAfterAccess",
        "position": {
            "x": -0.3360154430000071,
            "y": 1.7880112037873823,
            "z": 1.9740648184787146
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkExpireAfterWrite",
        "text": "checkExpireAfterWrite",
        "color": "#CBCBAE",
        "additional": "checkExpireAfterWrite",
        "position": {
            "x": -0.3228287490047741,
            "y": 1.8031488628492918,
            "z": 1.9610153538354502
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkMaximumWeight",
        "text": "checkMaximumWeight",
        "color": "#CBCBAE",
        "additional": "checkMaximumWeight",
        "position": {
            "x": -0.34407595698120463,
            "y": 1.7916446914750053,
            "z": 1.9328071497083825
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkMaximumSize",
        "text": "checkMaximumSize",
        "color": "#CBCBAE",
        "additional": "checkMaximumSize",
        "position": {
            "x": -0.34886370373520836,
            "y": 1.820302131739747,
            "z": 1.9231612504815765
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkWeakKeys",
        "text": "checkWeakKeys",
        "color": "#CBCBAE",
        "additional": "checkWeakKeys",
        "position": {
            "x": -0.3449912119208922,
            "y": 1.8401105627771874,
            "z": 1.945454696289639
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "checkRefreshAfterWrite",
        "text": "checkRefreshAfterWrite",
        "color": "#CBCBAE",
        "additional": "checkRefreshAfterWrite",
        "position": {
            "x": -0.3356355592525654,
            "y": 1.7713529137820976,
            "z": 1.9571308896406527
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder"
        ],
        "label": "checkValueStrength",
        "text": "checkValueStrength",
        "color": "#CBCBAE",
        "additional": "checkValueStrength",
        "position": {
            "x": -0.35581483873247677,
            "y": 1.8504482634948882,
            "z": 1.9262946546850312
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString"
        ],
        "label": "runTest",
        "text": "runTest",
        "color": "#CBCBAE",
        "additional": "runTest",
        "position": {
            "x": -0.33785574237202065,
            "y": 1.1933597386360018,
            "z": 1.8919722346922194
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString"
        ],
        "label": "toSpec",
        "text": "toSpec",
        "color": "#CBCBAE",
        "additional": "toSpec",
        "position": {
            "x": -0.34360290479913036,
            "y": 1.1917468495126107,
            "z": 1.9074604005469058
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replaceConditionally_changeWeight",
        "text": "replaceConditionally_changeWeight",
        "color": "#CBCBAE",
        "additional": "replaceConditionally_changeWeight",
        "position": {
            "x": -0.06159210757145639,
            "y": 2.0603728868315905,
            "z": 1.2680374292400618
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "removeConditionally",
        "text": "removeConditionally",
        "color": "#CBCBAE",
        "additional": "removeConditionally",
        "position": {
            "x": -0.04399071040515856,
            "y": 2.026878905850767,
            "z": 1.2590138595485323
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "put_sameWeight",
        "text": "put_sameWeight",
        "color": "#CBCBAE",
        "additional": "put_sameWeight",
        "position": {
            "x": -0.045668684782414926,
            "y": 2.0642936357746207,
            "z": 1.233553305583977
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replace_changeWeight",
        "text": "replace_changeWeight",
        "color": "#CBCBAE",
        "additional": "replace_changeWeight",
        "position": {
            "x": -0.06381104633671186,
            "y": 2.0465308833700098,
            "z": 1.2432451926595105
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replaceConditionally_fails",
        "text": "replaceConditionally_fails",
        "color": "#CBCBAE",
        "additional": "replaceConditionally_fails",
        "position": {
            "x": -0.07810816599469961,
            "y": 2.033910575033217,
            "z": 1.260699989123375
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "invalidateAll",
        "text": "invalidateAll",
        "color": "#CBCBAE",
        "additional": "invalidateAll",
        "position": {
            "x": -0.03991139728642901,
            "y": 2.0791933691411755,
            "z": 1.2551032578155046
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replace_sameWeight",
        "text": "replace_sameWeight",
        "color": "#CBCBAE",
        "additional": "replace_sameWeight",
        "position": {
            "x": -0.042868967563610694,
            "y": 2.0322189548037457,
            "z": 1.2782227077047459
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "remove",
        "text": "remove",
        "color": "#CBCBAE",
        "additional": "remove",
        "position": {
            "x": -0.017022691950643543,
            "y": 2.0558901662944518,
            "z": 1.2434376130826106
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "replaceConditionally_sameWeight",
        "text": "replaceConditionally_sameWeight",
        "color": "#CBCBAE",
        "additional": "replaceConditionally_sameWeight",
        "position": {
            "x": -0.026690629077897987,
            "y": 2.084983761435831,
            "z": 1.2284973191241542
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "put_changeWeight",
        "text": "put_changeWeight",
        "color": "#CBCBAE",
        "additional": "put_changeWeight",
        "position": {
            "x": -0.06893642978273773,
            "y": 2.024653562861219,
            "z": 1.2776125789020494
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "removeConditionally_fails",
        "text": "removeConditionally_fails",
        "color": "#CBCBAE",
        "additional": "removeConditionally_fails",
        "position": {
            "x": -0.01224827323653821,
            "y": 2.0827120832363644,
            "z": 1.2458232884306892
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "put",
        "text": "put",
        "color": "#CBCBAE",
        "additional": "put",
        "position": {
            "x": -0.01830768594021026,
            "y": 2.042733787632622,
            "z": 1.2638811891605148
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "put_asyncWeight",
        "text": "put_asyncWeight",
        "color": "#CBCBAE",
        "additional": "put_asyncWeight",
        "position": {
            "x": 0.17386405001175298,
            "y": 1.5916228034130182,
            "z": 1.1087496165804414
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "evict_zero_async",
        "text": "evict_zero_async",
        "color": "#CBCBAE",
        "additional": "evict_zero_async",
        "position": {
            "x": 0.16283108596873008,
            "y": 1.6077193028825647,
            "z": 1.103980846697603
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "setExpiresAfter_duration",
        "text": "setExpiresAfter_duration",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter_duration",
        "position": {
            "x": 0.8173796214783295,
            "y": 1.5998371465710215,
            "z": 2.0687202736734873
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "oldest_snapshot",
        "text": "oldest_snapshot",
        "color": "#CBCBAE",
        "additional": "oldest_snapshot",
        "position": {
            "x": 0.7875162611866655,
            "y": 1.6052663387062907,
            "z": 2.0432664406324585
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "setExpiresAfter",
        "text": "setExpiresAfter",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter",
        "position": {
            "x": 0.7932573011699531,
            "y": 1.603984293641655,
            "z": 2.0245532163798963
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "youngest_snapshot",
        "text": "youngest_snapshot",
        "color": "#CBCBAE",
        "additional": "youngest_snapshot",
        "position": {
            "x": 0.8144200894240208,
            "y": 1.6002885893587835,
            "z": 2.047731318788891
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_nullKey",
        "text": "putIfAbsent_nullKey",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_nullKey",
        "position": {
            "x": -0.43013523061304804,
            "y": 1.5323596758183589,
            "z": 1.5141326421373615
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "getExpiresAfter",
        "text": "getExpiresAfter",
        "color": "#CBCBAE",
        "additional": "getExpiresAfter",
        "position": {
            "x": -0.44492772485709053,
            "y": 1.5123355119448239,
            "z": 1.527559168792765
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_nullValue",
        "text": "putIfAbsent_nullValue",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_nullValue",
        "position": {
            "x": -0.4176194120114006,
            "y": 1.511995736851517,
            "z": 1.533705104059272
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_replace",
        "text": "put_replace",
        "color": "#CBCBAE",
        "additional": "put_replace",
        "position": {
            "x": -0.4028887652873594,
            "y": 1.536184793273721,
            "z": 1.5315289258815494
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "setExpiresAfter",
        "text": "setExpiresAfter",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter",
        "position": {
            "x": -0.4301592679056705,
            "y": 1.4958413751010875,
            "z": 1.5040267826874807
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "getExpiresAfter_duration",
        "text": "getExpiresAfter_duration",
        "color": "#CBCBAE",
        "additional": "getExpiresAfter_duration",
        "position": {
            "x": -0.45274084584604557,
            "y": 1.538160353471983,
            "z": 1.4961024954821147
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_negativeDuration",
        "text": "put_negativeDuration",
        "color": "#CBCBAE",
        "additional": "put_negativeDuration",
        "position": {
            "x": -0.4780637448157127,
            "y": 1.5151631953664428,
            "z": 1.5006160935769617
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_negativeDuration",
        "text": "putIfAbsent_negativeDuration",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_negativeDuration",
        "position": {
            "x": -0.46078413565302456,
            "y": 1.5024617370335165,
            "z": 1.5147882155822199
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "oldest_snapshot",
        "text": "oldest_snapshot",
        "color": "#CBCBAE",
        "additional": "oldest_snapshot",
        "position": {
            "x": -0.4080308967577876,
            "y": 1.5511277893532613,
            "z": 1.5031445146671174
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_nullTimeUnit",
        "text": "putIfAbsent_nullTimeUnit",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_nullTimeUnit",
        "position": {
            "x": -0.4225623644363158,
            "y": 1.4883544887635165,
            "z": 1.4804669147070828
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_nullDuration",
        "text": "put_nullDuration",
        "color": "#CBCBAE",
        "additional": "put_nullDuration",
        "position": {
            "x": -0.4428718327707699,
            "y": 1.5304105051870924,
            "z": 1.477020158539462
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_insert",
        "text": "putIfAbsent_insert",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_insert",
        "position": {
            "x": -0.47078478763461273,
            "y": 1.5284422579469445,
            "z": 1.4742478904194112
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_present",
        "text": "putIfAbsent_present",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_present",
        "position": {
            "x": -0.4660715332844553,
            "y": 1.4918248045754972,
            "z": 1.4874807551952407
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "youngest_snapshot",
        "text": "youngest_snapshot",
        "color": "#CBCBAE",
        "additional": "youngest_snapshot",
        "position": {
            "x": -0.3854876211138607,
            "y": 1.549246027600624,
            "z": 1.5075413642847109
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_nullValue",
        "text": "put_nullValue",
        "color": "#CBCBAE",
        "additional": "put_nullValue",
        "position": {
            "x": -0.40188612754800845,
            "y": 1.5074394505129225,
            "z": 1.4866184333295691
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_insert",
        "text": "put_insert",
        "color": "#CBCBAE",
        "additional": "put_insert",
        "position": {
            "x": -0.4469479728966391,
            "y": 1.49443723520598,
            "z": 1.473292436267661
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "setExpiresAfter_duration",
        "text": "setExpiresAfter_duration",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter_duration",
        "position": {
            "x": -0.4241935313507432,
            "y": 1.5477734536181826,
            "z": 1.4881878829402035
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_nullTimeUnit",
        "text": "put_nullTimeUnit",
        "color": "#CBCBAE",
        "additional": "put_nullTimeUnit",
        "position": {
            "x": -0.40109209710433014,
            "y": 1.4956007788652808,
            "z": 1.506072830007393
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "putIfAbsent_nullDuration",
        "text": "putIfAbsent_nullDuration",
        "color": "#CBCBAE",
        "additional": "putIfAbsent_nullDuration",
        "position": {
            "x": -0.38350954752696154,
            "y": 1.51980136327825,
            "z": 1.5235787298330807
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "put_nullKey",
        "text": "put_nullKey",
        "color": "#CBCBAE",
        "additional": "put_nullKey",
        "position": {
            "x": -0.377507774952923,
            "y": 1.514548275171981,
            "z": 1.5013929090389344
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably"
        ],
        "label": "put_insert_replaceExpired_expiryFails",
        "text": "put_insert_replaceExpired_expiryFails",
        "color": "#CBCBAE",
        "additional": "put_insert_replaceExpired_expiryFails",
        "position": {
            "x": -0.5538952300146253,
            "y": 1.3443110216382532,
            "z": 1.3002973411499954
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably"
        ],
        "label": "put_update_expiryFails",
        "text": "put_update_expiryFails",
        "color": "#CBCBAE",
        "additional": "put_update_expiryFails",
        "position": {
            "x": -0.5678467791941296,
            "y": 1.360569158318466,
            "z": 1.3021995888202222
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "youngest_snapshot",
        "text": "youngest_snapshot",
        "color": "#CBCBAE",
        "additional": "youngest_snapshot",
        "position": {
            "x": 0.8603774546299607,
            "y": 1.4111936292683303,
            "z": 1.631850975820447
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "oldest_snapshot",
        "text": "oldest_snapshot",
        "color": "#CBCBAE",
        "additional": "oldest_snapshot",
        "position": {
            "x": 0.8895905519811804,
            "y": 1.4089326651463683,
            "z": 1.6472654910339934
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "setExpiresAfter_duration",
        "text": "setExpiresAfter_duration",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter_duration",
        "position": {
            "x": 0.8792519434179262,
            "y": 1.4226188497360435,
            "z": 1.6270481355858268
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "setExpiresAfter",
        "text": "setExpiresAfter",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter",
        "position": {
            "x": 0.8519090599034218,
            "y": 1.4210597565410792,
            "z": 1.611558871301231
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration"
        ],
        "label": "expireAfterUpdate",
        "text": "expireAfterUpdate",
        "color": "#CBCBAE",
        "additional": "expireAfterUpdate",
        "position": {
            "x": -0.5272561440442788,
            "y": 1.5507235697989268,
            "z": 2.472558661935744
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime"
        ],
        "label": "expireAfterCreate",
        "text": "expireAfterCreate",
        "color": "#CBCBAE",
        "additional": "expireAfterCreate",
        "position": {
            "x": -0.5222458395076255,
            "y": 1.5187528236008399,
            "z": 2.43753891623696
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime"
        ],
        "label": "expireAfterRead",
        "text": "expireAfterRead",
        "color": "#CBCBAE",
        "additional": "expireAfterRead",
        "position": {
            "x": -0.53488128986548,
            "y": 1.5411477558487419,
            "z": 2.4540505506672043
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features"
        ],
        "label": "makeLocalCacheSpec",
        "text": "makeLocalCacheSpec",
        "color": "#CBCBAE",
        "additional": "makeLocalCacheSpec",
        "position": {
            "x": -0.3611804983412221,
            "y": 1.3284493212994932,
            "z": 0.5340857667517773
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features",
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features"
        ],
        "label": "makeNodeSpec",
        "text": "makeNodeSpec",
        "color": "#CBCBAE",
        "additional": "makeNodeSpec",
        "position": {
            "x": -0.35190707094696894,
            "y": 1.2890727635615227,
            "z": 0.5602488901621837
        }
    },
    "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)": {
        "id": "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay"
        ],
        "label": "schedule",
        "text": "schedule",
        "color": "#CBCBAE",
        "additional": "schedule",
        "position": {
            "x": -0.01840619040911995,
            "y": 2.37186659086497,
            "z": 0.9897154521423678
        }
    },
    "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command",
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay",
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay"
        ],
        "label": "schedule",
        "text": "schedule",
        "color": "#CBCBAE",
        "additional": "schedule",
        "position": {
            "x": 0.011008653461648255,
            "y": 2.426405469579727,
            "z": 1.0051258053810064
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "setExpiresAfter",
        "text": "setExpiresAfter",
        "color": "#CBCBAE",
        "additional": "setExpiresAfter",
        "position": {
            "x": -0.1090605135515339,
            "y": 1.9301529844234946,
            "z": 2.0752402096956155
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "putIfAbsent",
        "text": "putIfAbsent",
        "color": "#CBCBAE",
        "additional": "putIfAbsent",
        "position": {
            "x": -0.11960994593220686,
            "y": 1.9290606459772974,
            "z": 2.100466355449976
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "put",
        "text": "put",
        "color": "#CBCBAE",
        "additional": "put",
        "position": {
            "x": -0.11357993121633081,
            "y": 1.9052891103945624,
            "z": 2.088984997549777
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration"
        ],
        "label": "put",
        "text": "put",
        "color": "#CBCBAE",
        "additional": "put",
        "position": {
            "x": -0.6564443560456157,
            "y": 1.9033310596928743,
            "z": 1.7956790080942824
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration"
        ],
        "label": "putIfAbsent",
        "text": "putIfAbsent",
        "color": "#CBCBAE",
        "additional": "putIfAbsent",
        "position": {
            "x": -0.660825801948896,
            "y": 1.9240290689940511,
            "z": 1.8012970044994885
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q"
        ],
        "label": "makeAtomic",
        "text": "makeAtomic",
        "color": "#CBCBAE",
        "additional": "makeAtomic",
        "position": {
            "x": 0.5240503596234682,
            "y": 1.3068454004387249,
            "z": 0.5492555184511355
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q",
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q"
        ],
        "label": "makeQueue",
        "text": "makeQueue",
        "color": "#CBCBAE",
        "additional": "makeQueue",
        "position": {
            "x": 0.5119221957483722,
            "y": 1.3223404388328341,
            "z": 0.558723291695524
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite"
        ],
        "label": "youngest_snapshot",
        "text": "youngest_snapshot",
        "color": "#CBCBAE",
        "additional": "youngest_snapshot",
        "position": {
            "x": 0.39083205379103725,
            "y": 0.5541867408419523,
            "z": 1.5605665969337026
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite",
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite"
        ],
        "label": "oldest_snapshot",
        "text": "oldest_snapshot",
        "color": "#CBCBAE",
        "additional": "oldest_snapshot",
        "position": {
            "x": 0.3859109444766309,
            "y": 0.5206758116677218,
            "z": 1.5658936040210165
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times"
        ],
        "label": "getExpirationDelay_fuzzy",
        "text": "getExpirationDelay_fuzzy",
        "color": "#CBCBAE",
        "additional": "getExpirationDelay_fuzzy",
        "position": {
            "x": 0.009176094739120844,
            "y": 1.6308016350558734,
            "z": 1.6870424962506299
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times"
        ],
        "label": "schedule_fuzzy",
        "text": "schedule_fuzzy",
        "color": "#CBCBAE",
        "additional": "schedule_fuzzy",
        "position": {
            "x": 0.008718748217268812,
            "y": 1.6091548711830224,
            "z": 1.680944876944371
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer"
        ],
        "label": "snapshot",
        "text": "snapshot",
        "color": "#CBCBAE",
        "additional": "snapshot",
        "position": {
            "x": -0.22769152374395119,
            "y": 1.8770363640410772,
            "z": 1.1345732195966414
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer",
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer"
        ],
        "label": "snapshot",
        "text": "snapshot",
        "color": "#CBCBAE",
        "additional": "snapshot",
        "position": {
            "x": -0.21458702072375202,
            "y": 1.891801377935988,
            "z": 1.1334322563109311
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e"
        ],
        "label": "soElement",
        "text": "soElement",
        "color": "#CBCBAE",
        "additional": "soElement",
        "position": {
            "x": 0.23398026865889587,
            "y": 2.043726338112214,
            "z": 0.6540699898890521
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e",
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e"
        ],
        "label": "spElement",
        "text": "spElement",
        "color": "#CBCBAE",
        "additional": "spElement",
        "position": {
            "x": 0.22292963982690717,
            "y": 2.0686075443522105,
            "z": 0.6527889528342451
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad"
        ],
        "label": "expiration",
        "text": "expiration",
        "color": "#CBCBAE",
        "additional": "expiration",
        "position": {
            "x": 0.9821761405399427,
            "y": 0.9493581864889274,
            "z": 1.6925919390081188
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad",
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad"
        ],
        "label": "initialValues",
        "text": "initialValues",
        "color": "#CBCBAE",
        "additional": "initialValues",
        "position": {
            "x": 0.9538993201103505,
            "y": 0.9684018359853159,
            "z": 1.684826747290596
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events"
        ],
        "label": "hotspot",
        "text": "hotspot",
        "color": "#CBCBAE",
        "additional": "hotspot",
        "position": {
            "x": -0.022965605944559098,
            "y": 2.0533179765436786,
            "z": 2.368196953338444
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events"
        ],
        "label": "uniform",
        "text": "uniform",
        "color": "#CBCBAE",
        "additional": "uniform",
        "position": {
            "x": -0.025633325207360058,
            "y": 2.033901444119999,
            "z": 2.356256646183456
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events"
        ],
        "label": "zipfian",
        "text": "zipfian",
        "color": "#CBCBAE",
        "additional": "zipfian",
        "position": {
            "x": -0.2697830352491879,
            "y": 2.1828364670382663,
            "z": 2.2857062873415703
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events",
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events"
        ],
        "label": "scrambledZipfian",
        "text": "scrambledZipfian",
        "color": "#CBCBAE",
        "additional": "scrambledZipfian",
        "position": {
            "x": -0.2598911618790758,
            "y": 2.206756808022453,
            "z": 2.282399119467354
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "replace",
        "text": "replace",
        "color": "#CBCBAE",
        "additional": "replace",
        "position": {
            "x": -0.07130360994235241,
            "y": 0.8526909690075916,
            "z": 1.203414373371358
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "replace",
        "text": "replace",
        "color": "#CBCBAE",
        "additional": "replace",
        "position": {
            "x": -0.0885854089642435,
            "y": 0.8666576033113025,
            "z": 1.1979208999537048
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "replace",
        "text": "replace",
        "color": "#CBCBAE",
        "additional": "replace",
        "position": {
            "x": -0.09440321314236022,
            "y": 0.8433523541607412,
            "z": 1.2100954415073648
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta"
        ],
        "label": "replaceItems",
        "text": "replaceItems",
        "color": "#CBCBAE",
        "additional": "replaceItems",
        "position": {
            "x": 0.015924847689407162,
            "y": 1.1484894199605484,
            "z": 2.092876178093432
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta"
        ],
        "label": "replaceItems",
        "text": "replaceItems",
        "color": "#CBCBAE",
        "additional": "replaceItems",
        "position": {
            "x": 0.005063058290819766,
            "y": 1.1432415510037786,
            "z": 2.0693507564273985
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta"
        ],
        "label": "replaceItems",
        "text": "replaceItems",
        "color": "#CBCBAE",
        "additional": "replaceItems",
        "position": {
            "x": -0.0018812649795455494,
            "y": 1.126086563472751,
            "z": 2.0939991461228207
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "getChainAtOffset",
        "text": "getChainAtOffset",
        "color": "#CBCBAE",
        "additional": "getChainAtOffset",
        "position": {
            "x": -0.9388418047428899,
            "y": 1.554348085842572,
            "z": 0.9638398484104
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "getChainStart",
        "text": "getChainStart",
        "color": "#CBCBAE",
        "additional": "getChainStart",
        "position": {
            "x": -0.9574804941420223,
            "y": 1.5385491457761453,
            "z": 0.9553201356238208
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "removeItem",
        "text": "removeItem",
        "color": "#CBCBAE",
        "additional": "removeItem",
        "position": {
            "x": -0.9787289853685743,
            "y": 1.5510762169062182,
            "z": 0.9691243735699525
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "getChain",
        "text": "getChain",
        "color": "#CBCBAE",
        "additional": "getChain",
        "position": {
            "x": -0.9592203567798941,
            "y": 1.5550939387213838,
            "z": 0.980740362464534
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight"
        ],
        "label": "of",
        "text": "of",
        "color": "#CBCBAE",
        "additional": "of",
        "position": {
            "x": 0.14842672445045646,
            "y": 1.0871787680868903,
            "z": 0.9647951584780087
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight"
        ],
        "label": "checkStats",
        "text": "checkStats",
        "color": "#CBCBAE",
        "additional": "checkStats",
        "position": {
            "x": 0.1497088862066862,
            "y": 1.0890576347236571,
            "z": 0.9469613717351724
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishCreated",
        "text": "publishCreated",
        "color": "#CBCBAE",
        "additional": "publishCreated",
        "position": {
            "x": 0.6987055069005099,
            "y": 1.7705926158780148,
            "z": 1.2946668935093726
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishRemovedQuietly",
        "text": "publishRemovedQuietly",
        "color": "#CBCBAE",
        "additional": "publishRemovedQuietly",
        "position": {
            "x": 0.6989716865560469,
            "y": 1.741385095514813,
            "z": 1.3048324037909684
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishExpiredQuietly",
        "text": "publishExpiredQuietly",
        "color": "#CBCBAE",
        "additional": "publishExpiredQuietly",
        "position": {
            "x": 0.7221392475349631,
            "y": 1.7761916945514566,
            "z": 1.291569239891023
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishExpired",
        "text": "publishExpired",
        "color": "#CBCBAE",
        "additional": "publishExpired",
        "position": {
            "x": 0.7215153552768283,
            "y": 1.74820895976057,
            "z": 1.3086827593703623
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "publishRemoved",
        "text": "publishRemoved",
        "color": "#CBCBAE",
        "additional": "publishRemoved",
        "position": {
            "x": 0.711622252111584,
            "y": 1.7424971482262401,
            "z": 1.2853881236360016
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue"
        ],
        "label": "publishUpdated",
        "text": "publishUpdated",
        "color": "#CBCBAE",
        "additional": "publishUpdated",
        "position": {
            "x": -0.13421066930100034,
            "y": 2.008580702953586,
            "z": 1.447234053432441
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue"
        ],
        "label": "publish",
        "text": "publish",
        "color": "#CBCBAE",
        "additional": "publish",
        "position": {
            "x": -0.13816076010739553,
            "y": 1.990868859137991,
            "z": 1.4386206189320399
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher"
        ],
        "label": "addError",
        "text": "addError",
        "color": "#CBCBAE",
        "additional": "addError",
        "position": {
            "x": 0.6267017948125795,
            "y": 1.749605378319901,
            "z": 0.7709661201297235
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)",
        "size": 2,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher",
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher"
        ],
        "label": "expectThat",
        "text": "expectThat",
        "color": "#CBCBAE",
        "additional": "expectThat",
        "position": {
            "x": 0.644005659289123,
            "y": 1.7584445625214333,
            "z": 0.7449068455135333
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.3617557346883329,
            "y": 1.3747564799343408,
            "z": 1.4316321390538458
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.3256655984975021,
            "y": 1.4010682534881667,
            "z": 1.469043938559568
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.34272983615933095,
            "y": 1.1663711759638993,
            "z": 1.4852344320558064
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.3324272642332502,
            "y": 1.2138833967004272,
            "z": 1.4968888713764628
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.399339024496834,
            "y": 1.26583509834665,
            "z": 1.377370316438692
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.346723008475585,
            "y": 1.1957573904315937,
            "z": 1.3718109152121767
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.2952138456297031,
            "y": 1.3704368016944988,
            "z": 1.4640987979984355
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.30573139564509577,
            "y": 1.2118635344329403,
            "z": 1.4786485997278107
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.3715787422791734,
            "y": 1.2097601554974748,
            "z": 1.3864894642748133
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.35831567211925264,
            "y": 1.389856812182893,
            "z": 1.4814972092757528
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.32828431138146685,
            "y": 1.1563340521808154,
            "z": 1.4335627153965032
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.3230926963446801,
            "y": 1.2217362599585442,
            "z": 1.3634734644149455
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.3079814954052642,
            "y": 1.3471495479775208,
            "z": 1.4838486182299153
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.3144159245600171,
            "y": 1.1768800610785155,
            "z": 1.4814717535051665
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.3880970663027934,
            "y": 1.268656556164545,
            "z": 1.3519339426039694
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.3079510593788475,
            "y": 1.39267875988337,
            "z": 1.4416312236251045
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.31130211324617285,
            "y": 1.1895582381130685,
            "z": 1.437227684687478
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.32578625957275253,
            "y": 1.2569694444490334,
            "z": 1.3520201254384099
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.3802133260574907,
            "y": 1.3607500952226892,
            "z": 1.4647602332052934
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.35474677790657916,
            "y": 1.1754991360175742,
            "z": 1.4364549428428366
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.3686523591421449,
            "y": 1.2419585594874545,
            "z": 1.3400842534671265
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.3200617855785224,
            "y": 1.3707827404166109,
            "z": 1.4286094916480159
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.36091247878853494,
            "y": 1.2175802424651336,
            "z": 1.4904958462126725
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.3879304287393117,
            "y": 1.2137001371696359,
            "z": 1.3599795651191524
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.3502462669730031,
            "y": 1.3549660434119688,
            "z": 1.4715922966678137
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.3761023441681539,
            "y": 1.1938679535997148,
            "z": 1.4544869253581045
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.35156308725041674,
            "y": 1.2138789869108684,
            "z": 1.3470673390177699
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.32568327341496506,
            "y": 1.3709434981442938,
            "z": 1.4949477733267147
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.37301431936885154,
            "y": 1.187439289025794,
            "z": 1.4801288958025145
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.3997994674110541,
            "y": 1.2303064819070535,
            "z": 1.3865190716325688
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.3481788536528383,
            "y": 1.4003477900969048,
            "z": 1.4430505831400047
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.3021624749477243,
            "y": 1.1689651755316597,
            "z": 1.454257793001033
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.3673833242199076,
            "y": 1.2919179994371106,
            "z": 1.3628185831263462
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.3507168118727282,
            "y": 1.3406845184887417,
            "z": 1.4979309090507062
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.3550757812121197,
            "y": 1.1511242388128415,
            "z": 1.4571736969364264
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_negative(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/drain_blocksOrderedMap(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase_max(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease_min(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf_absent(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_decrease(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/maximumSize_increase(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightedSize(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/coldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/hottest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/weightOf(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<java.lang.Integer, java.lang.Integer> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.34690393239459083,
            "y": 1.2787513531394288,
            "z": 1.3433943084564954
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.6215639881651587,
            "y": 1.4376764371301507,
            "z": 1.7004048613804321
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.6233365355207325,
            "y": 1.4796939760273427,
            "z": 1.7191827080764588
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys"
        ],
        "label": "keys",
        "text": "keys",
        "color": "#F6E146",
        "additional": "keys",
        "position": {
            "x": -0.6025195466334278,
            "y": 1.495182417423666,
            "z": 1.7406966387394982
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/keys"
        ],
        "label": "keys",
        "text": "keys",
        "color": "#F6E146",
        "additional": "keys",
        "position": {
            "x": -0.6113458222793632,
            "y": 1.4469720050868005,
            "z": 1.7360131389950098
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect"
        ],
        "label": "expect",
        "text": "expect",
        "color": "#F6E146",
        "additional": "expect",
        "position": {
            "x": -0.6117311873430773,
            "y": 1.5185237825348796,
            "z": 1.7110721874131698
        }
    },
    "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect": {
        "id": "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkEvict(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.BoundedLocalCacheTest/method/checkReorder(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, java.util.List<java.lang.Integer> keys, java.lang.Integer[] expect)/parameter/expect"
        ],
        "label": "expect",
        "text": "expect",
        "color": "#F6E146",
        "additional": "expect",
        "position": {
            "x": -0.6259071008067011,
            "y": 1.4832836831912077,
            "z": 1.689255567800251
        }
    },
    "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 0.3650832998875966,
            "y": 1.7635573051320785,
            "z": 0.8572266045272603
        }
    },
    "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 0.39038599186630174,
            "y": 1.7775553065604117,
            "z": 0.8847973665957105
        }
    },
    "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.43337978750391426,
            "y": 1.6692958651837346,
            "z": 0.883958319825844
        }
    },
    "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.4339519709155708,
            "y": 1.6736239586205128,
            "z": 0.8463372315436648
        }
    },
    "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause": {
        "id": "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause"
        ],
        "label": "cause",
        "text": "cause",
        "color": "#F6E146",
        "additional": "cause",
        "position": {
            "x": 0.3674848930454331,
            "y": 1.704775401036925,
            "z": 0.8290335109923552
        }
    },
    "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause": {
        "id": "com.github.benmanes.caffeine.cache.RemovalListener/method/onRemoval(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CacheWriter/method/delete(K key, V value, com.github.benmanes.caffeine.cache.RemovalCause cause)/parameter/cause"
        ],
        "label": "cause",
        "text": "cause",
        "color": "#F6E146",
        "additional": "cause",
        "position": {
            "x": 0.3857918908497442,
            "y": 1.6616854211685332,
            "z": 0.8411440658238264
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression"
        ],
        "label": "expression",
        "text": "expression",
        "color": "#F6E146",
        "additional": "expression",
        "position": {
            "x": 0.4238507845306614,
            "y": 1.601750371209842,
            "z": 1.3484618545473908
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/expression"
        ],
        "label": "expression",
        "text": "expression",
        "color": "#F6E146",
        "additional": "expression",
        "position": {
            "x": 0.45045716329940944,
            "y": 1.565638762791867,
            "z": 1.3359522479721506
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template"
        ],
        "label": "template",
        "text": "template",
        "color": "#F6E146",
        "additional": "template",
        "position": {
            "x": 0.45151737416405835,
            "y": 1.5501491096102233,
            "z": 1.2978757939281755
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/template"
        ],
        "label": "template",
        "text": "template",
        "color": "#F6E146",
        "additional": "template",
        "position": {
            "x": 0.4412505602268444,
            "y": 1.59764673422416,
            "z": 1.3109972475707616
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args"
        ],
        "label": "args",
        "text": "args",
        "color": "#F6E146",
        "additional": "args",
        "position": {
            "x": 0.44316658532758546,
            "y": 1.5246177199624205,
            "z": 1.3418455538299718
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/method/requireState(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/method/requireArgument(boolean expression, java.lang.String template, java.lang.Object[] args)/parameter/args"
        ],
        "label": "args",
        "text": "args",
        "color": "#F6E146",
        "additional": "args",
        "position": {
            "x": 0.42587441324458464,
            "y": 1.560953257918523,
            "z": 1.3643836799582836
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.264559503526266,
            "y": 1.8272372876958123,
            "z": 1.9423360218045516
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.25575587628526375,
            "y": 1.8074671938274716,
            "z": 1.9178492756657246
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.4061647992416956,
            "y": 1.8233047833809857,
            "z": 1.9134637551123062
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.40990493203243605,
            "y": 1.7680981792642614,
            "z": 1.9696431359318654
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.31710492232910226,
            "y": 1.8528940132341642,
            "z": 2.007279000130723
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.33651791354239136,
            "y": 1.888615375951751,
            "z": 2.009121563125292
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.2774641020699359,
            "y": 1.777329287444822,
            "z": 1.9095651859769756
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.42948268577775917,
            "y": 1.8163301288694098,
            "z": 1.93061359555155
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.3686114827550101,
            "y": 1.8753830815283625,
            "z": 2.0160125144817984
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.2921208795902862,
            "y": 1.8069219374621182,
            "z": 1.9042066701927216
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.41974735931941265,
            "y": 1.8112747947470995,
            "z": 1.9606865644038431
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.37195854322539124,
            "y": 1.8270414071155947,
            "z": 2.011676377943892
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.29861820089351687,
            "y": 1.8299988982944277,
            "z": 1.8814559292553688
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.43235689609371486,
            "y": 1.772991763403289,
            "z": 1.9426636070403769
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.343162605137205,
            "y": 1.8349411597421539,
            "z": 2.022961924767717
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.2727036003536629,
            "y": 1.8641910128792163,
            "z": 1.9290530694455852
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.4043799739354932,
            "y": 1.783354175834025,
            "z": 1.9049407846928088
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.386660507908964,
            "y": 1.8671854307743532,
            "z": 1.9913836040335855
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.29437602647480066,
            "y": 1.8705384004248609,
            "z": 1.9036404796203013
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.3968929462296369,
            "y": 1.7434318553801442,
            "z": 1.947140240310656
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.3250472966759107,
            "y": 1.8888610239222214,
            "z": 1.980059722628769
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/spec",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/spec"
        ],
        "label": "spec",
        "text": "spec",
        "color": "#F6E146",
        "additional": "spec",
        "position": {
            "x": -0.2661669312776628,
            "y": 1.8436753956588592,
            "z": 1.8954582225579542
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/context",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.40206655260590163,
            "y": 1.7513526921803801,
            "z": 1.9191210132739067
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkValueStrength(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkInitialCapacity(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumWeight(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkMaximumSize(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkWeakKeys(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder)/parameter/builder",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/builder"
        ],
        "label": "builder",
        "text": "builder",
        "color": "#F6E146",
        "additional": "builder",
        "position": {
            "x": -0.3643504693966768,
            "y": 1.8952804499414695,
            "z": 1.976840389255029
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch",
        "position": {
            "x": -0.30559345322269593,
            "y": 1.7177340569739863,
            "z": 1.9904856701722389
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch",
        "position": {
            "x": -0.2972259147720874,
            "y": 1.756025679161294,
            "z": 2.014184855994818
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkRefreshAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterAccess(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch",
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/checkExpireAfterWrite(com.github.benmanes.caffeine.cache.CaffeineSpec spec, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.Caffeine<?, ?> builder, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch",
        "position": {
            "x": -0.2753886260823404,
            "y": 1.7494924438422386,
            "z": 1.982454206617662
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.33624786981311416,
            "y": 1.1074199270074876,
            "z": 1.8636702619209202
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.36904065835966815,
            "y": 1.1056279419173538,
            "z": 1.8810240381239114
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch",
        "position": {
            "x": -0.32742356335235756,
            "y": 1.0977921999441609,
            "z": 1.9195612576052925
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/epoch"
        ],
        "label": "epoch",
        "text": "epoch",
        "color": "#F6E146",
        "additional": "epoch",
        "position": {
            "x": -0.3100014043798579,
            "y": 1.101997999649576,
            "z": 1.8877633796420306
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString"
        ],
        "label": "nanosToString",
        "text": "nanosToString",
        "color": "#F6E146",
        "additional": "nanosToString",
        "position": {
            "x": -0.36098412979601757,
            "y": 1.0970468229714552,
            "z": 1.913404555359384
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/toSpec(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpecTest/method/runTest(com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.CaffeineSpecTest$Epoch epoch, java.util.function.LongFunction<java.lang.String> nanosToString)/parameter/nanosToString"
        ],
        "label": "nanosToString",
        "text": "nanosToString",
        "color": "#F6E146",
        "additional": "nanosToString",
        "position": {
            "x": -0.3387584659331728,
            "y": 1.0805465974277384,
            "z": 1.8873656755667119
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.037140345622604154,
            "y": 2.1267172501917253,
            "z": 1.3370606236330536
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.0127337158609524,
            "y": 2.097142292590572,
            "z": 1.3454834503359172
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.009681114406007496,
            "y": 1.9517954762106207,
            "z": 1.2286508434035688
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.024677576369517062,
            "y": 2.024112285241424,
            "z": 1.1816628959918425
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.12281355627356749,
            "y": 2.0845112609536,
            "z": 1.213286453101773
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.13644458385385616,
            "y": 2.109755616707794,
            "z": 1.244115376591023
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.03588782514115252,
            "y": 2.145174890157171,
            "z": 1.30645093918981
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.05145755149667053,
            "y": 1.958256994294723,
            "z": 1.192624044117073
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.08730679049246615,
            "y": 2.1495538452702183,
            "z": 1.2038927957625472
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.05938014880426734,
            "y": 2.1155776911837254,
            "z": 1.3182697632311273
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.07506677666174555,
            "y": 1.981752607866171,
            "z": 1.203138542159149
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.10037247690086493,
            "y": 2.1657750463083794,
            "z": 1.231828856565342
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.008995322497239888,
            "y": 2.0609037602281095,
            "z": 1.3188754764870438
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.03377422098515348,
            "y": 1.9857924731530705,
            "z": 1.1754387324957292
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.10775756886446808,
            "y": 2.107528397964564,
            "z": 1.1959971024385032
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.013728663504842364,
            "y": 2.056272272347056,
            "z": 1.3378319675977897
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.00660583170945328,
            "y": 2.0090172345518322,
            "z": 1.2037496588593242
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.06666959694393093,
            "y": 2.153858090922435,
            "z": 1.2266398312783082
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.01624109623635306,
            "y": 2.095993203087349,
            "z": 1.2974592873807735
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.0040313944483935105,
            "y": 1.9853401387020466,
            "z": 1.188109946028331
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.1189822231785368,
            "y": 2.0864070738198155,
            "z": 1.2428495725931037
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.012318623787071825,
            "y": 2.10599483401258,
            "z": 1.3233732686571167
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.002727359077612901,
            "y": 1.9827876673847054,
            "z": 1.2293766195800875
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.07972555995566633,
            "y": 2.1153656553899483,
            "z": 1.1994470936992898
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.0041330281409875935,
            "y": 2.1359637354471124,
            "z": 1.2915852955435878
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.06160512115162975,
            "y": 1.9520563518106786,
            "z": 1.2233887407338737
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.10938148664353198,
            "y": 2.125149107282798,
            "z": 1.2695253168910696
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.007668710671786427,
            "y": 2.138740839040034,
            "z": 1.3204392212818614
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.02333950252291994,
            "y": 1.9497287843712054,
            "z": 1.203175141666975
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.1211148996715844,
            "y": 2.1475995888228017,
            "z": 1.2521770951658024
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.05309957194565973,
            "y": 2.087649553204301,
            "z": 1.3402405071959442
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.03777786903971436,
            "y": 1.9543307699895618,
            "z": 1.2416096919896678
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.08495801502833156,
            "y": 2.156663721851905,
            "z": 1.2564160383724994
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.04097997825608257,
            "y": 2.0580288872842267,
            "z": 1.3299676196325274
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.05951592664507732,
            "y": 2.0056389978796574,
            "z": 1.1818788044767032
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/invalidateAll(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replace_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/remove(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/replaceConditionally_sameWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_changeWeight(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
            "com.github.benmanes.caffeine.cache.EvictionTest/method/removeConditionally_fails(com.github.benmanes.caffeine.cache.Cache<java.lang.String, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": -0.1244704056806668,
            "y": 2.1379060408267776,
            "z": 1.216190824157164
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.20508818061838485,
            "y": 1.5920285444404352,
            "z": 1.0519735470773823
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.1717997057317442,
            "y": 1.6163963061777407,
            "z": 1.0419095174667619
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.19872651741917435,
            "y": 1.5493371401219995,
            "z": 1.0572884921133219
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.1770253600412921,
            "y": 1.577103699094676,
            "z": 1.0339591498322092
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.1429406965176192,
            "y": 1.5761216637383826,
            "z": 1.042592503815872
        }
    },
    "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction": {
        "id": "com.github.benmanes.caffeine.cache.EvictionTest/method/evict_zero_async(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.EvictionTest/method/put_asyncWeight(com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.Integer, java.util.List<java.lang.Integer>> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Eviction<?, ?> eviction)/parameter/eviction"
        ],
        "label": "eviction",
        "text": "eviction",
        "color": "#F6E146",
        "additional": "eviction",
        "position": {
            "x": 0.16688512334390238,
            "y": 1.5401895351578616,
            "z": 1.0526751199771338
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.8120481753305255,
            "y": 1.6657204691375909,
            "z": 2.0154357793031155
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.8390898732212924,
            "y": 1.6231410226966485,
            "z": 2.000594931506642
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.8048315253685292,
            "y": 1.5326175935114947,
            "z": 2.009249371249293
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.8367200660630087,
            "y": 1.5348661644072306,
            "z": 2.029283971515135
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "expireAfterAccess",
        "text": "expireAfterAccess",
        "color": "#F6E146",
        "additional": "expireAfterAccess",
        "position": {
            "x": 0.7643758502590514,
            "y": 1.622036936578447,
            "z": 2.0958618482409648
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "expireAfterAccess",
        "text": "expireAfterAccess",
        "color": "#F6E146",
        "additional": "expireAfterAccess",
        "position": {
            "x": 0.7928992560231785,
            "y": 1.6536275824734907,
            "z": 2.0930363658026483
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.8439120544141012,
            "y": 1.6691378327732882,
            "z": 2.0268380358409175
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.7839610211944159,
            "y": 1.52240131193453,
            "z": 2.0371063551798834
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "expireAfterAccess",
        "text": "expireAfterAccess",
        "color": "#F6E146",
        "additional": "expireAfterAccess",
        "position": {
            "x": 0.747326669233539,
            "y": 1.639072514740036,
            "z": 2.0639734568187116
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.8572690987671905,
            "y": 1.631708040537785,
            "z": 2.040233216499347
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.817596181524447,
            "y": 1.5202474393137904,
            "z": 2.058736006136921
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess",
            "com.github.benmanes.caffeine.cache.ExpireAfterAccessTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterAccess)/parameter/expireAfterAccess"
        ],
        "label": "expireAfterAccess",
        "text": "expireAfterAccess",
        "color": "#F6E146",
        "additional": "expireAfterAccess",
        "position": {
            "x": 0.773936821323246,
            "y": 1.6736681708986065,
            "z": 2.06379178152986
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.5001216264337802,
            "y": 1.586039765777676,
            "z": 1.5260526720357197
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.48873773846425317,
            "y": 1.6436722003934983,
            "z": 1.542686455781463
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.45559536280377055,
            "y": 1.3983434765389768,
            "z": 1.5632896589995415
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.4048142839695231,
            "y": 1.3737748358365567,
            "z": 1.5526787107729003
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.40443623181023447,
            "y": 1.592869751823302,
            "z": 1.4065026864487926
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.42830693034450096,
            "y": 1.499125706414342,
            "z": 1.4117515526786053
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.5064720009898392,
            "y": 1.6096296595272188,
            "z": 1.5425741580944765
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.4635229800611892,
            "y": 1.427054469758585,
            "z": 1.5530253813551804
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.40278048927781895,
            "y": 1.480390533159754,
            "z": 1.41494292468898
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.42755793671632025,
            "y": 1.6516298415061852,
            "z": 1.5120765754195846
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.4609166654076484,
            "y": 1.3986609162702748,
            "z": 1.503782090808519
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.41150695595432496,
            "y": 1.5138164774306364,
            "z": 1.3920040970745662
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.4639501483984926,
            "y": 1.6695910599968278,
            "z": 1.5321527420538565
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.39601140635587617,
            "y": 1.3679452120377231,
            "z": 1.5237731819397273
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.38514813011574833,
            "y": 1.5439433404115956,
            "z": 1.391528663290802
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.4514000319538992,
            "y": 1.6489522075835585,
            "z": 1.496122933558814
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.4432075168773587,
            "y": 1.3689740261512038,
            "z": 1.5007002734096673
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.3748165613411205,
            "y": 1.5847739194403865,
            "z": 1.453244541492622
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.4353583696714991,
            "y": 1.6124344154199866,
            "z": 1.550039519745258
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.3871345665357909,
            "y": 1.4058362776677633,
            "z": 1.503648294011677
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.3747965666710197,
            "y": 1.5752364198011817,
            "z": 1.4066254854051041
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.4691881641196618,
            "y": 1.5815388451920982,
            "z": 1.5731381763137975
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.39183347197393525,
            "y": 1.4111137841827583,
            "z": 1.564189303208377
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.35022637615589236,
            "y": 1.5629558405294988,
            "z": 1.445844953903741
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.43681816126807527,
            "y": 1.5878288209631115,
            "z": 1.574727465809837
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.40904924718027436,
            "y": 1.4385210778398256,
            "z": 1.566460659234045
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.3926968136088542,
            "y": 1.5352257483111538,
            "z": 1.4291660436382818
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.45249439323767027,
            "y": 1.6192258373027517,
            "z": 1.5789209191715385
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.43788040020464625,
            "y": 1.4357005222379824,
            "z": 1.570954829537695
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.37719135756531663,
            "y": 1.4810975910581217,
            "z": 1.4278493511502437
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.4810947305396537,
            "y": 1.656838623371364,
            "z": 1.5096207810547955
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.4747038981249837,
            "y": 1.4097651979286265,
            "z": 1.528549435058089
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.44211713859021307,
            "y": 1.5348254634122183,
            "z": 1.4097751000368652
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.433929946521167,
            "y": 1.6645983820017576,
            "z": 1.5439883179648064
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.40715488818307655,
            "y": 1.37501453016051,
            "z": 1.4944714695343548
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.41572282434688834,
            "y": 1.5550984560642906,
            "z": 1.390637520901893
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.5019526462564636,
            "y": 1.6203453411285496,
            "z": 1.5112098187738126
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.4641103095862762,
            "y": 1.3765528614215397,
            "z": 1.5301722025874533
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.36967188494259207,
            "y": 1.5952615739395892,
            "z": 1.4299139478557659
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.4789403683160197,
            "y": 1.6253014474284597,
            "z": 1.4938846193667015
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.42866177591045573,
            "y": 1.3997739074512487,
            "z": 1.488054225790476
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.4394258125610081,
            "y": 1.5698242309816994,
            "z": 1.4091854782915068
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.4916186690924671,
            "y": 1.5769625837215935,
            "z": 1.558044510645656
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.3802108357864765,
            "y": 1.426223874013587,
            "z": 1.5426105444757214
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.3546963284805996,
            "y": 1.5412376345579837,
            "z": 1.4133957116633487
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.45479482069340904,
            "y": 1.6171127024699776,
            "z": 1.5242770654964646
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.4212945059431302,
            "y": 1.4114299449020966,
            "z": 1.5263299881814505
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.35596193855502434,
            "y": 1.5004406981471508,
            "z": 1.432861994016947
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.4136101030453615,
            "y": 1.6251269930381658,
            "z": 1.5639257983337096
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.37657165207911847,
            "y": 1.3992538353010158,
            "z": 1.5308914565157028
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.37591815401290674,
            "y": 1.5045096986356596,
            "z": 1.4009688643963638
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.45856722118169724,
            "y": 1.6517907200238222,
            "z": 1.5631854896114228
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.42293184641353554,
            "y": 1.3995170030248745,
            "z": 1.5725770373362096
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.3474991015661253,
            "y": 1.5295647284421503,
            "z": 1.4434299328425846
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.41028453303094203,
            "y": 1.6359564150156631,
            "z": 1.5338093195487816
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.4269126482090767,
            "y": 1.3559120620944545,
            "z": 1.5261087734071337
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.4274856178718722,
            "y": 1.585306375774274,
            "z": 1.4295519299572268
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.4861820745037547,
            "y": 1.6182893454443061,
            "z": 1.5669096975836467
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.4413900082714396,
            "y": 1.371518214066032,
            "z": 1.5511885898528535
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullKey(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_replace(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/getExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_negativeDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_present(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullValue(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_nullTimeUnit(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar",
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/putIfAbsent_nullDuration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireAfterVar)/parameter/expireAfterVar"
        ],
        "label": "expireAfterVar",
        "text": "expireAfterVar",
        "color": "#F6E146",
        "additional": "expireAfterVar",
        "position": {
            "x": -0.40216247963484353,
            "y": 1.600298988925985,
            "z": 1.4380209556370707
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.5670561275345212,
            "y": 1.2941095776396094,
            "z": 1.2564582785784908
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.5982634888013604,
            "y": 1.3283758927604639,
            "z": 1.2525556435520002
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.6176520069386111,
            "y": 1.3195284472490663,
            "z": 1.2793849339963514
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": -0.5917960147505847,
            "y": 1.281287776396851,
            "z": 1.277653362090147
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably"
        ],
        "label": "expireVariably",
        "text": "expireVariably",
        "color": "#F6E146",
        "additional": "expireVariably",
        "position": {
            "x": -0.5833756662197984,
            "y": 1.3699777636158041,
            "z": 1.2432260179614443
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_update_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterVarTest/method/put_insert_replaceExpired_expiryFails(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.VarExpiration<java.lang.Integer, java.lang.Integer> expireVariably)/parameter/expireVariably"
        ],
        "label": "expireVariably",
        "text": "expireVariably",
        "color": "#F6E146",
        "additional": "expireVariably",
        "position": {
            "x": -0.5614525737239078,
            "y": 1.329243475120659,
            "z": 1.238640892519066
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.8367924079397013,
            "y": 1.4803654276191862,
            "z": 1.63613589349131
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.8595374623864758,
            "y": 1.5063714777939348,
            "z": 1.6490175922560273
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.8349710734669111,
            "y": 1.3477340254004642,
            "z": 1.6167252583604022
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.8666940392161762,
            "y": 1.331901761283976,
            "z": 1.6344745805777732
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "expireAfterWrite",
        "text": "expireAfterWrite",
        "color": "#F6E146",
        "additional": "expireAfterWrite",
        "position": {
            "x": 0.9000053151217675,
            "y": 1.4349046298638308,
            "z": 1.5772654059251827
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "expireAfterWrite",
        "text": "expireAfterWrite",
        "color": "#F6E146",
        "additional": "expireAfterWrite",
        "position": {
            "x": 0.8899689029133646,
            "y": 1.3876291404792513,
            "z": 1.5755194353286803
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.8795958963162491,
            "y": 1.4782246704102922,
            "z": 1.6691191549659248
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.8557680760054633,
            "y": 1.3494559440200045,
            "z": 1.6667695304844374
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "expireAfterWrite",
        "text": "expireAfterWrite",
        "color": "#F6E146",
        "additional": "expireAfterWrite",
        "position": {
            "x": 0.918148867137577,
            "y": 1.3782579290819421,
            "z": 1.6010239224695588
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.8853480966796763,
            "y": 1.4951505752703695,
            "z": 1.6258786223223078
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.8220082837698268,
            "y": 1.3619274639128918,
            "z": 1.6497918159127016
        }
    },
    "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite",
            "com.github.benmanes.caffeine.cache.ExpireAfterWriteTest/method/setExpiresAfter_duration(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> expireAfterWrite)/parameter/expireAfterWrite"
        ],
        "label": "expireAfterWrite",
        "text": "expireAfterWrite",
        "color": "#F6E146",
        "additional": "expireAfterWrite",
        "position": {
            "x": 0.9260094949955269,
            "y": 1.4269403065883046,
            "z": 1.604948906551084
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.5019358351331131,
            "y": 1.4850072588673697,
            "z": 2.491594181603574
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.48348490842485947,
            "y": 1.4847764742924867,
            "z": 2.4541746979107293
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -0.488580976121463,
            "y": 1.593368981236,
            "z": 2.4382330407382864
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -0.5144560640941489,
            "y": 1.5744934081670117,
            "z": 2.407278831701925
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime"
        ],
        "label": "currentTime",
        "text": "currentTime",
        "color": "#F6E146",
        "additional": "currentTime",
        "position": {
            "x": -0.5671818086145932,
            "y": 1.4914193672024687,
            "z": 2.478061702642444
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime"
        ],
        "label": "currentTime",
        "text": "currentTime",
        "color": "#F6E146",
        "additional": "currentTime",
        "position": {
            "x": -0.5838939143702832,
            "y": 1.5387850084267944,
            "z": 2.472432881871856
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/key",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.5204252446257773,
            "y": 1.4599800064555488,
            "z": 2.4602260448468463
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/value",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -0.5261000808588722,
            "y": 1.6117227741381333,
            "z": 2.4323556194621516
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentTime",
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterCreate(K key, V value, long currentTime)/parameter/currentTime"
        ],
        "label": "currentTime",
        "text": "currentTime",
        "color": "#F6E146",
        "additional": "currentTime",
        "position": {
            "x": -0.5795875512387942,
            "y": 1.5075005538537884,
            "z": 2.4387241127964012
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration"
        ],
        "label": "currentDuration",
        "text": "currentDuration",
        "color": "#F6E146",
        "additional": "currentDuration",
        "position": {
            "x": -0.5680899929910248,
            "y": 1.5958256104048143,
            "z": 2.454360797456328
        }
    },
    "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration": {
        "id": "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterRead(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Expiry/method/expireAfterUpdate(K key, V value, long currentTime, long currentDuration)/parameter/currentDuration"
        ],
        "label": "currentDuration",
        "text": "currentDuration",
        "color": "#F6E146",
        "additional": "currentDuration",
        "position": {
            "x": -0.5456723762194211,
            "y": 1.606908773781586,
            "z": 2.4863712321978104
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className"
        ],
        "label": "className",
        "text": "className",
        "color": "#F6E146",
        "additional": "className",
        "position": {
            "x": -0.32936780478988337,
            "y": 1.2552649207173727,
            "z": 0.5274013266907241
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/className"
        ],
        "label": "className",
        "text": "className",
        "color": "#F6E146",
        "additional": "className",
        "position": {
            "x": -0.34586304702605597,
            "y": 1.2851938222240273,
            "z": 0.5008054801484816
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal"
        ],
        "label": "isFinal",
        "text": "isFinal",
        "color": "#F6E146",
        "additional": "isFinal",
        "position": {
            "x": -0.4024678934204571,
            "y": 1.2998494069042454,
            "z": 0.5320824656920586
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/isFinal"
        ],
        "label": "isFinal",
        "text": "isFinal",
        "color": "#F6E146",
        "additional": "isFinal",
        "position": {
            "x": -0.3859300278180462,
            "y": 1.254494798095711,
            "z": 0.5390376478811083
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features"
        ],
        "label": "features",
        "text": "features",
        "color": "#F6E146",
        "additional": "features",
        "position": {
            "x": -0.31885632126780616,
            "y": 1.354762810898617,
            "z": 0.5419033794495781
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/method/makeNodeSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/method/makeLocalCacheSpec(java.lang.String className, boolean isFinal, java.util.Set<com.github.benmanes.caffeine.cache.Feature> features)/parameter/features"
        ],
        "label": "features",
        "text": "features",
        "color": "#F6E146",
        "additional": "features",
        "position": {
            "x": -0.3046975927649709,
            "y": 1.308500285307301,
            "z": 0.5399436246699454
        }
    },
    "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor": {
        "id": "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor"
        ],
        "label": "executor",
        "text": "executor",
        "color": "#F6E146",
        "additional": "executor",
        "position": {
            "x": -0.029716097236261896,
            "y": 2.4328358919340762,
            "z": 0.9688722784503239
        }
    },
    "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/executor",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/executor"
        ],
        "label": "executor",
        "text": "executor",
        "color": "#F6E146",
        "additional": "executor",
        "position": {
            "x": -0.044857767426455086,
            "y": 2.4310279334403697,
            "z": 1.0054932300465733
        }
    },
    "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command": {
        "id": "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command"
        ],
        "label": "command",
        "text": "command",
        "color": "#F6E146",
        "additional": "command",
        "position": {
            "x": 0.02559476081260592,
            "y": 2.364098780985086,
            "z": 1.0206582050901858
        }
    },
    "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/command",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/command"
        ],
        "label": "command",
        "text": "command",
        "color": "#F6E146",
        "additional": "command",
        "position": {
            "x": -0.004844827434839383,
            "y": 2.3877463576397093,
            "z": 1.041131069149629
        }
    },
    "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay": {
        "id": "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay"
        ],
        "label": "delay",
        "text": "delay",
        "color": "#F6E146",
        "additional": "delay",
        "position": {
            "x": 0.04164389472626184,
            "y": 2.3956166288212706,
            "z": 0.9775459277290826
        }
    },
    "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay": {
        "id": "com.github.benmanes.caffeine.cache.Scheduler/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)/parameter/delay",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Pacer/method/schedule(java.util.concurrent.Executor executor, java.lang.Runnable command, long now, long delay)/parameter/delay"
        ],
        "label": "delay",
        "text": "delay",
        "color": "#F6E146",
        "additional": "delay",
        "position": {
            "x": 0.01809978652846178,
            "y": 2.364068237808034,
            "z": 0.9631801858816433
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.07896506474399878,
            "y": 1.9153539207304322,
            "z": 2.145732284296443
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.06819271939387417,
            "y": 1.8659536075573613,
            "z": 2.1221230023800866
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": -0.04834489567212208,
            "y": 1.91625768184386,
            "z": 2.1149249347151056
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": -0.04774740859725046,
            "y": 1.91182349545293,
            "z": 2.073556725200942
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "unit",
        "text": "unit",
        "color": "#F6E146",
        "additional": "unit",
        "position": {
            "x": -0.05330724524714725,
            "y": 1.9612861739410263,
            "z": 2.1028437651544207
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "unit",
        "text": "unit",
        "color": "#F6E146",
        "additional": "unit",
        "position": {
            "x": -0.08621603304497161,
            "y": 1.9900069343201126,
            "z": 2.1080821550372946
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/key",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.09545633921529517,
            "y": 1.8693546966185064,
            "z": 2.145320478805443
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": -0.05232341146308428,
            "y": 1.8699771137069265,
            "z": 2.0928351246330807
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/setExpiresAfter(K key, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit",
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/unit"
        ],
        "label": "unit",
        "text": "unit",
        "color": "#F6E146",
        "additional": "unit",
        "position": {
            "x": -0.07048161276533937,
            "y": 1.9765535456714487,
            "z": 2.070201721327577
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -0.12230243050473166,
            "y": 1.858911029571661,
            "z": 2.1246344670431867
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, long duration, java.util.concurrent.TimeUnit unit)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -0.1312671528799112,
            "y": 1.9035831138142858,
            "z": 2.145267262777123
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.7307537457167239,
            "y": 1.9060804741598234,
            "z": 1.7915816208476412
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.7190885478314775,
            "y": 1.8650749895013081,
            "z": 1.7763659230234223
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -0.7064596248139632,
            "y": 1.9372343673027803,
            "z": 1.7470603189563079
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": -0.7032987619769746,
            "y": 1.8892345719808192,
            "z": 1.7437160957240196
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": -0.7289742796587886,
            "y": 1.8939158042027366,
            "z": 1.7568409241521608
        }
    },
    "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/putIfAbsent(K key, V value, java.time.Duration duration)/parameter/duration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Policy.VarExpiration/method/put(K key, V value, java.time.Duration duration)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": -0.7254490445171717,
            "y": 1.9385455999859884,
            "z": 1.7704792830714806
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers"
        ],
        "label": "producers",
        "text": "producers",
        "color": "#F6E146",
        "additional": "producers",
        "position": {
            "x": 0.5338583532226966,
            "y": 1.2484200379730424,
            "z": 0.5583194507587789
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/producers"
        ],
        "label": "producers",
        "text": "producers",
        "color": "#F6E146",
        "additional": "producers",
        "position": {
            "x": 0.5582263369231917,
            "y": 1.2809251601285325,
            "z": 0.5774239866527571
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers"
        ],
        "label": "consumers",
        "text": "consumers",
        "color": "#F6E146",
        "additional": "consumers",
        "position": {
            "x": 0.5086677182445638,
            "y": 1.2885844844220102,
            "z": 0.5061234176379983
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/consumers"
        ],
        "label": "consumers",
        "text": "consumers",
        "color": "#F6E146",
        "additional": "consumers",
        "position": {
            "x": 0.4764761660400081,
            "y": 1.2841960511971457,
            "z": 0.5286943080530565
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity"
        ],
        "label": "capacity",
        "text": "capacity",
        "color": "#F6E146",
        "additional": "capacity",
        "position": {
            "x": 0.4685907020904636,
            "y": 1.3188526359499901,
            "z": 0.574871080017987
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/capacity"
        ],
        "label": "capacity",
        "text": "capacity",
        "color": "#F6E146",
        "additional": "capacity",
        "position": {
            "x": 0.4851328692723862,
            "y": 1.2713035604957614,
            "z": 0.5789749269492226
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering"
        ],
        "label": "ordering",
        "text": "ordering",
        "color": "#F6E146",
        "additional": "ordering",
        "position": {
            "x": 0.5673026064568578,
            "y": 1.342771804888116,
            "z": 0.551087715508328
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/ordering"
        ],
        "label": "ordering",
        "text": "ordering",
        "color": "#F6E146",
        "additional": "ordering",
        "position": {
            "x": 0.5433403857955597,
            "y": 1.3622745271975714,
            "z": 0.5243801019246668
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q"
        ],
        "label": "q",
        "text": "q",
        "color": "#F6E146",
        "additional": "q",
        "position": {
            "x": 0.5286040930948515,
            "y": 1.3249286151279014,
            "z": 0.6044881143890741
        }
    },
    "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q": {
        "id": "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeQueue(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.QueueSanityTest/method/makeAtomic(int producers, int consumers, int capacity, com.github.benmanes.caffeine.cache.org.jctools.queues.spec.Ordering ordering, java.util.Queue<java.lang.Integer> q)/parameter/q"
        ],
        "label": "q",
        "text": "q",
        "color": "#F6E146",
        "additional": "q",
        "position": {
            "x": 0.5284172409651504,
            "y": 1.3703018547965184,
            "z": 0.5843412337234537
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.4243111880365793,
            "y": 0.5,
            "z": 1.58323106611049
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.4389711515923751,
            "y": 0.540183369750778,
            "z": 1.5616049756657124
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.4010367514656479,
            "y": 0.5531500200388355,
            "z": 1.5148859704726791
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/context"
        ],
        "label": "context",
        "text": "context",
        "color": "#F6E146",
        "additional": "context",
        "position": {
            "x": 0.3839764596905286,
            "y": 0.5060693223841767,
            "z": 1.5180857345769816
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite"
        ],
        "label": "refreshAfterWrite",
        "text": "refreshAfterWrite",
        "color": "#F6E146",
        "additional": "refreshAfterWrite",
        "position": {
            "x": 0.3845711541626198,
            "y": 0.581322935480473,
            "z": 1.6014721100961606
        }
    },
    "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite": {
        "id": "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/oldest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.RefreshAfterWriteTest/method/youngest_snapshot(com.github.benmanes.caffeine.cache.Cache<java.lang.Integer, java.lang.Integer> cache, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.testing.CacheContext context, com.github.benmanes.caffeine.cache.com.github.benmanes.caffeine.cache.Policy.Expiration<java.lang.Integer, java.lang.Integer> refreshAfterWrite)/parameter/refreshAfterWrite"
        ],
        "label": "refreshAfterWrite",
        "text": "refreshAfterWrite",
        "color": "#F6E146",
        "additional": "refreshAfterWrite",
        "position": {
            "x": 0.36405694568383185,
            "y": 0.5377727672610486,
            "z": 1.6088458672565646
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock"
        ],
        "label": "clock",
        "text": "clock",
        "color": "#F6E146",
        "additional": "clock",
        "position": {
            "x": 0.05865460843035408,
            "y": 1.5897491057236302,
            "z": 1.7284702719537037
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/clock",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/clock"
        ],
        "label": "clock",
        "text": "clock",
        "color": "#F6E146",
        "additional": "clock",
        "position": {
            "x": 0.04531962754483465,
            "y": 1.6337264698276006,
            "z": 1.7414907102958042
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": 0.00989928886351299,
            "y": 1.5589136167594346,
            "z": 1.7339587437598891
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/duration",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/duration"
        ],
        "label": "duration",
        "text": "duration",
        "color": "#F6E146",
        "additional": "duration",
        "position": {
            "x": 0.006107299312279935,
            "y": 1.6024416631136729,
            "z": 1.751563761099892
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times"
        ],
        "label": "times",
        "text": "times",
        "color": "#F6E146",
        "additional": "times",
        "position": {
            "x": 0.03606779040650698,
            "y": 1.603182190318901,
            "z": 1.7577448861394578
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/schedule_fuzzy(long clock, long duration, long[] times)/parameter/times",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/getExpirationDelay_fuzzy(long clock, long duration, long[] times)/parameter/times"
        ],
        "label": "times",
        "text": "times",
        "color": "#F6E146",
        "additional": "times",
        "position": {
            "x": 0.03830685397661271,
            "y": 1.5608640779607799,
            "z": 1.7391943739667504
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending"
        ],
        "label": "ascending",
        "text": "ascending",
        "color": "#F6E146",
        "additional": "ascending",
        "position": {
            "x": -0.23188252517082264,
            "y": 1.935787189147591,
            "z": 1.0765449874125357
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/ascending"
        ],
        "label": "ascending",
        "text": "ascending",
        "color": "#F6E146",
        "additional": "ascending",
        "position": {
            "x": -0.2569331303107154,
            "y": 1.8960280917522951,
            "z": 1.0726374184714085
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit"
        ],
        "label": "limit",
        "text": "limit",
        "color": "#F6E146",
        "additional": "limit",
        "position": {
            "x": -0.27424440731637356,
            "y": 1.9154217337010713,
            "z": 1.0900278391223908
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/limit"
        ],
        "label": "limit",
        "text": "limit",
        "color": "#F6E146",
        "additional": "limit",
        "position": {
            "x": -0.25158720913005395,
            "y": 1.9536286790521473,
            "z": 1.0923815960758225
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer"
        ],
        "label": "transformer",
        "text": "transformer",
        "color": "#F6E146",
        "additional": "transformer",
        "position": {
            "x": -0.23464003101291164,
            "y": 1.8746748620209073,
            "z": 1.0641420727361026
        }
    },
    "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer": {
        "id": "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.TimerWheelTest/method/snapshot(boolean ascending, int limit, long clock, java.util.function.Function<java.lang.Long, java.lang.Long> transformer)/parameter/transformer"
        ],
        "label": "transformer",
        "text": "transformer",
        "color": "#F6E146",
        "additional": "transformer",
        "position": {
            "x": -0.21562042009406845,
            "y": 1.9157114971689342,
            "z": 1.0621740898718879
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer"
        ],
        "label": "buffer",
        "text": "buffer",
        "color": "#F6E146",
        "additional": "buffer",
        "position": {
            "x": 0.17944199177810294,
            "y": 2.0424419509371186,
            "z": 0.6418034317713276
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/buffer",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/buffer"
        ],
        "label": "buffer",
        "text": "buffer",
        "color": "#F6E146",
        "additional": "buffer",
        "position": {
            "x": 0.2016669626131229,
            "y": 1.999769407499082,
            "z": 0.6457513914895155
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset"
        ],
        "label": "offset",
        "text": "offset",
        "color": "#F6E146",
        "additional": "offset",
        "position": {
            "x": 0.26684580078371356,
            "y": 2.086502339667377,
            "z": 0.6797553873073442
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/offset",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/offset"
        ],
        "label": "offset",
        "text": "offset",
        "color": "#F6E146",
        "additional": "offset",
        "position": {
            "x": 0.26940848984893484,
            "y": 2.034581606409702,
            "z": 0.6789715327939614
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e"
        ],
        "label": "e",
        "text": "e",
        "color": "#F6E146",
        "additional": "e",
        "position": {
            "x": 0.25633992952048756,
            "y": 2.058830201667161,
            "z": 0.613207770810138
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/spElement(E[] buffer, long offset, E e)/parameter/e",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeRefArrayAccess/method/soElement(E[] buffer, long offset, E e)/parameter/e"
        ],
        "label": "e",
        "text": "e",
        "color": "#F6E146",
        "additional": "e",
        "position": {
            "x": 0.233906813251211,
            "y": 2.1027756795913435,
            "z": 0.6186082642273161
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.9391893031425631,
            "y": 0.9111776237829821,
            "z": 1.7103138540173402
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.9662498346074677,
            "y": 0.9317666034175065,
            "z": 1.7340388442817394
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source"
        ],
        "label": "source",
        "text": "source",
        "color": "#F6E146",
        "additional": "source",
        "position": {
            "x": 1,
            "y": 0.9930239946966661,
            "z": 1.6595772791311436
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/source"
        ],
        "label": "source",
        "text": "source",
        "color": "#F6E146",
        "additional": "source",
        "position": {
            "x": 0.9797793483619579,
            "y": 0.9588639692013012,
            "z": 1.6397242330107724
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad"
        ],
        "label": "lastLoad",
        "text": "lastLoad",
        "color": "#F6E146",
        "additional": "lastLoad",
        "position": {
            "x": 0.9840760378588715,
            "y": 1.013626875603219,
            "z": 1.7089181840603738
        }
    },
    "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad": {
        "id": "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/initialValues(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.issues.Issue30Test/method/expiration(com.github.benmanes.caffeine.cache.issues.com.github.benmanes.caffeine.cache.AsyncLoadingCache<java.lang.String, java.lang.String> cache, java.util.concurrent.ConcurrentMap<java.lang.String, java.lang.String> source, java.util.concurrent.ConcurrentMap<java.lang.String, java.time.Instant> lastLoad)/parameter/lastLoad"
        ],
        "label": "lastLoad",
        "text": "lastLoad",
        "color": "#F6E146",
        "additional": "lastLoad",
        "position": {
            "x": 0.951151922592582,
            "y": 0.9939090803433188,
            "z": 1.7266934711447302
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound"
        ],
        "label": "lowerBound",
        "text": "lowerBound",
        "color": "#F6E146",
        "additional": "lowerBound",
        "position": {
            "x": 0.015508506808269651,
            "y": 2.0617785460128806,
            "z": 2.3980172882424977
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/lowerBound",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/lowerBound"
        ],
        "label": "lowerBound",
        "text": "lowerBound",
        "color": "#F6E146",
        "additional": "lowerBound",
        "position": {
            "x": 0.034406799511144115,
            "y": 2.0332986011070044,
            "z": 2.373864202688485
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound"
        ],
        "label": "upperBound",
        "text": "upperBound",
        "color": "#F6E146",
        "additional": "upperBound",
        "position": {
            "x": 0.022086114292961145,
            "y": 1.9995357911349396,
            "z": 2.3506898448050517
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/upperBound",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/upperBound"
        ],
        "label": "upperBound",
        "text": "upperBound",
        "color": "#F6E146",
        "additional": "upperBound",
        "position": {
            "x": 0.0259257721406303,
            "y": 2.0486138935785783,
            "z": 2.338022444376638
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events"
        ],
        "label": "events",
        "text": "events",
        "color": "#F6E146",
        "additional": "events",
        "position": {
            "x": -0.00794978568595428,
            "y": 1.9742480186583817,
            "z": 2.376551413611908
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/uniform(int lowerBound, int upperBound, int events)/parameter/events",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/hotspot(int lowerBound, int upperBound, double hotsetFraction, double hotOpnFraction, int events)/parameter/events"
        ],
        "label": "events",
        "text": "events",
        "color": "#F6E146",
        "additional": "events",
        "position": {
            "x": -0.00071447655589163,
            "y": 2.005033163779295,
            "z": 2.4051640507388896
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items"
        ],
        "label": "items",
        "text": "items",
        "color": "#F6E146",
        "additional": "items",
        "position": {
            "x": -0.29297288563138735,
            "y": 2.2450012006955236,
            "z": 2.3068415568393563
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/items",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/items"
        ],
        "label": "items",
        "text": "items",
        "color": "#F6E146",
        "additional": "items",
        "position": {
            "x": -0.3110561238756636,
            "y": 2.1972707607767896,
            "z": 2.311550141952948
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant"
        ],
        "label": "constant",
        "text": "constant",
        "color": "#F6E146",
        "additional": "constant",
        "position": {
            "x": -0.2868018597678613,
            "y": 2.224467931715037,
            "z": 2.2367779022201946
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/constant",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/constant"
        ],
        "label": "constant",
        "text": "constant",
        "color": "#F6E146",
        "additional": "constant",
        "position": {
            "x": -0.3110010878877152,
            "y": 2.186729044071522,
            "z": 2.2498944119814226
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events"
        ],
        "label": "events",
        "text": "events",
        "color": "#F6E146",
        "additional": "events",
        "position": {
            "x": -0.3235098174347626,
            "y": 2.212514461346865,
            "z": 2.2760139079338835
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events": {
        "id": "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/scrambledZipfian(int items, double constant, int events)/parameter/events",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.Synthetic/method/zipfian(int items, double constant, int events)/parameter/events"
        ],
        "label": "events",
        "text": "events",
        "color": "#F6E146",
        "additional": "events",
        "position": {
            "x": -0.30019737895299925,
            "y": 2.251909833028748,
            "z": 2.263732685546879
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -0.05483924588078071,
            "y": 0.7967175634932642,
            "z": 1.1532133723753244
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -0.09103006954050763,
            "y": 0.7851257248543317,
            "z": 1.1417938699225445
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim"
        ],
        "label": "victim",
        "text": "victim",
        "color": "#F6E146",
        "additional": "victim",
        "position": {
            "x": -0.14187873244119853,
            "y": 0.8508295337103375,
            "z": 1.163702102901861
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim"
        ],
        "label": "victim",
        "text": "victim",
        "color": "#F6E146",
        "additional": "victim",
        "position": {
            "x": -0.13239839332204595,
            "y": 0.7999044305430152,
            "z": 1.1751691741708492
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart"
        ],
        "label": "bucketStart",
        "text": "bucketStart",
        "color": "#F6E146",
        "additional": "bucketStart",
        "position": {
            "x": -0.07973167348948107,
            "y": 0.8871178374273445,
            "z": 1.1427181657956975
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart"
        ],
        "label": "bucketStart",
        "text": "bucketStart",
        "color": "#F6E146",
        "additional": "bucketStart",
        "position": {
            "x": -0.07425921898044163,
            "y": 0.8458058491239141,
            "z": 1.1212359726779901
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "removedOffset",
        "text": "removedOffset",
        "color": "#F6E146",
        "additional": "removedOffset",
        "position": {
            "x": -0.1322438544350688,
            "y": 0.8469981426734399,
            "z": 1.1316534682890071
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "removedOffset",
        "text": "removedOffset",
        "color": "#F6E146",
        "additional": "removedOffset",
        "position": {
            "x": -0.10763348584685428,
            "y": 0.8770479928414379,
            "z": 1.1282795665325696
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -0.08125466197166442,
            "y": 0.7730251707823494,
            "z": 1.1744427528738512
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/victim"
        ],
        "label": "victim",
        "text": "victim",
        "color": "#F6E146",
        "additional": "victim",
        "position": {
            "x": -0.12344264607485134,
            "y": 0.812669188804349,
            "z": 1.1428097749590216
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/bucketStart"
        ],
        "label": "bucketStart",
        "text": "bucketStart",
        "color": "#F6E146",
        "additional": "bucketStart",
        "position": {
            "x": -0.04952937843843419,
            "y": 0.8482491359069013,
            "z": 1.1458887792147716
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replace(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, byte victim, int bucketStart, int removedOffset)/parameter/removedOffset"
        ],
        "label": "removedOffset",
        "text": "removedOffset",
        "color": "#F6E146",
        "additional": "removedOffset",
        "position": {
            "x": -0.09906952618593812,
            "y": 0.822105694302032,
            "z": 1.12304017570868
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx"
        ],
        "label": "idx",
        "text": "idx",
        "color": "#F6E146",
        "additional": "idx",
        "position": {
            "x": 0.005888511082829284,
            "y": 1.218832627260194,
            "z": 2.1225251227063993
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx"
        ],
        "label": "idx",
        "text": "idx",
        "color": "#F6E146",
        "additional": "idx",
        "position": {
            "x": 0.02495274057415031,
            "y": 1.198833404247586,
            "z": 2.1509052277534386
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start"
        ],
        "label": "start",
        "text": "start",
        "color": "#F6E146",
        "additional": "start",
        "position": {
            "x": 0.05566513193151024,
            "y": 1.1269263293701666,
            "z": 2.131116214754198
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start"
        ],
        "label": "start",
        "text": "start",
        "color": "#F6E146",
        "additional": "start",
        "position": {
            "x": 0.041495766788299804,
            "y": 1.1586726358549257,
            "z": 2.1551811756850348
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta"
        ],
        "label": "delta",
        "text": "delta",
        "color": "#F6E146",
        "additional": "delta",
        "position": {
            "x": -0.029493329075565122,
            "y": 1.1027105042345218,
            "z": 2.148509216250268
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta"
        ],
        "label": "delta",
        "text": "delta",
        "color": "#F6E146",
        "additional": "delta",
        "position": {
            "x": -0.032817962571856873,
            "y": 1.1562235681244375,
            "z": 2.1533420206802787
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/idx",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/idx"
        ],
        "label": "idx",
        "text": "idx",
        "color": "#F6E146",
        "additional": "idx",
        "position": {
            "x": -0.015134286489407511,
            "y": 1.1973271847823974,
            "z": 2.1492982720403218
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.0017762665564160507,
            "y": 1.1004491001630408,
            "z": 2.147946323867391
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.004733005381712063,
            "y": 1.1488159288590922,
            "z": 2.1593550446417122
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/start",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/start"
        ],
        "label": "start",
        "text": "start",
        "color": "#F6E146",
        "additional": "start",
        "position": {
            "x": 0.031376393007468195,
            "y": 1.1056422173280165,
            "z": 2.1551964123234972
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/method/replaceItems(int idx, long value, int start, int delta)/parameter/delta",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/method/replaceItems(int idx, byte value, int start, int delta)/parameter/delta"
        ],
        "label": "delta",
        "text": "delta",
        "color": "#F6E146",
        "additional": "delta",
        "position": {
            "x": -0.04803324885535165,
            "y": 1.1330398825263504,
            "z": 2.123912255940759
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -0.9792562612975325,
            "y": 1.4999629584572831,
            "z": 1.012439576546487
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -0.9422946107844195,
            "y": 1.4965636887276494,
            "z": 1.0135583453306256
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": -0.970214951886169,
            "y": 1.623072751168505,
            "z": 0.9913983574671112
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": -0.9598691541551825,
            "y": 1.6357126263492503,
            "z": 0.956451430132802
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "isLastIndex",
        "text": "isLastIndex",
        "color": "#F6E146",
        "additional": "isLastIndex",
        "position": {
            "x": -1,
            "y": 1.533694985122094,
            "z": 0.926222890004009
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "isLastIndex",
        "text": "isLastIndex",
        "color": "#F6E146",
        "additional": "isLastIndex",
        "position": {
            "x": -0.9911445690190698,
            "y": 1.5831394615209626,
            "z": 0.9238264034616431
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -0.939616834597272,
            "y": 1.4700198642265607,
            "z": 0.9822318418793926
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": -0.9248262435223634,
            "y": 1.617131745192909,
            "z": 0.9573112412754821
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "isLastIndex",
        "text": "isLastIndex",
        "color": "#F6E146",
        "additional": "isLastIndex",
        "position": {
            "x": -0.9577202720092477,
            "y": 1.5711412443803578,
            "z": 0.9061730678506431
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/fpaux"
        ],
        "label": "fpaux",
        "text": "fpaux",
        "color": "#F6E146",
        "additional": "fpaux",
        "position": {
            "x": -0.976197851322897,
            "y": 1.4708247252953974,
            "z": 0.9812098263128246
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": -0.9342445732310659,
            "y": 1.616966856827238,
            "z": 0.9949114672670851
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChain(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainAtOffset(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex, int offset)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/getChainStart(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinySetIndexing/method/removeItem(com.github.benmanes.caffeine.cache.simulator.admission.tinycache.HashedItem fpaux, long[] chainIndex, long[] isLastIndex)/parameter/isLastIndex"
        ],
        "label": "isLastIndex",
        "text": "isLastIndex",
        "color": "#F6E146",
        "additional": "isLastIndex",
        "position": {
            "x": -0.96640635939999,
            "y": 1.5218875366495643,
            "z": 0.9088073408341751
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/hitCount"
        ],
        "label": "hitCount",
        "text": "hitCount",
        "color": "#F6E146",
        "additional": "hitCount",
        "position": {
            "x": 0.1475925038481356,
            "y": 1.1957968880530074,
            "z": 0.9138438788986405
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/hitCount"
        ],
        "label": "hitCount",
        "text": "hitCount",
        "color": "#F6E146",
        "additional": "hitCount",
        "position": {
            "x": 0.1262781992109403,
            "y": 1.1824685661385956,
            "z": 0.9351897367585189
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/missCount"
        ],
        "label": "missCount",
        "text": "missCount",
        "color": "#F6E146",
        "additional": "missCount",
        "position": {
            "x": 0.10740514426142989,
            "y": 0.9995608931579794,
            "z": 0.9713213468298986
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/missCount"
        ],
        "label": "missCount",
        "text": "missCount",
        "color": "#F6E146",
        "additional": "missCount",
        "position": {
            "x": 0.12291804307679866,
            "y": 0.9939910870013833,
            "z": 0.9996646742458215
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadSuccessCount"
        ],
        "label": "loadSuccessCount",
        "text": "loadSuccessCount",
        "color": "#F6E146",
        "additional": "loadSuccessCount",
        "position": {
            "x": 0.22053346215859948,
            "y": 1.0748884633979723,
            "z": 0.9620970693728774
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadSuccessCount"
        ],
        "label": "loadSuccessCount",
        "text": "loadSuccessCount",
        "color": "#F6E146",
        "additional": "loadSuccessCount",
        "position": {
            "x": 0.20707718786482787,
            "y": 1.033054008497016,
            "z": 0.968896069599589
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadFailureCount"
        ],
        "label": "loadFailureCount",
        "text": "loadFailureCount",
        "color": "#F6E146",
        "additional": "loadFailureCount",
        "position": {
            "x": 0.18127043247140984,
            "y": 1.0254998618334086,
            "z": 0.9144962062699389
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadFailureCount"
        ],
        "label": "loadFailureCount",
        "text": "loadFailureCount",
        "color": "#F6E146",
        "additional": "loadFailureCount",
        "position": {
            "x": 0.17747191025328735,
            "y": 0.9979659240555308,
            "z": 0.9444023354131106
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/totalLoadTime"
        ],
        "label": "totalLoadTime",
        "text": "totalLoadTime",
        "color": "#F6E146",
        "additional": "totalLoadTime",
        "position": {
            "x": 0.18424300238520575,
            "y": 1.1393665947192562,
            "z": 0.9851058486076567
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/totalLoadTime"
        ],
        "label": "totalLoadTime",
        "text": "totalLoadTime",
        "color": "#F6E146",
        "additional": "totalLoadTime",
        "position": {
            "x": 0.21344906051639856,
            "y": 1.1211014924146199,
            "z": 0.9706551984732662
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionCount"
        ],
        "label": "evictionCount",
        "text": "evictionCount",
        "color": "#F6E146",
        "additional": "evictionCount",
        "position": {
            "x": 0.06662199487091769,
            "y": 1.117495318131942,
            "z": 0.9197242292807106
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionCount"
        ],
        "label": "evictionCount",
        "text": "evictionCount",
        "color": "#F6E146",
        "additional": "evictionCount",
        "position": {
            "x": 0.08362547948207899,
            "y": 1.154631039941194,
            "z": 0.9166513147494434
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionWeight"
        ],
        "label": "evictionWeight",
        "text": "evictionWeight",
        "color": "#F6E146",
        "additional": "evictionWeight",
        "position": {
            "x": 0.11000250504393416,
            "y": 1.055846275243785,
            "z": 0.9750480844412112
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionWeight"
        ],
        "label": "evictionWeight",
        "text": "evictionWeight",
        "color": "#F6E146",
        "additional": "evictionWeight",
        "position": {
            "x": 0.10783685953113742,
            "y": 1.0734188676388703,
            "z": 1.0040018924459204
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/hitCount": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/hitCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount"
        ],
        "label": "hitCount",
        "text": "hitCount",
        "color": "#F6E146",
        "additional": "hitCount",
        "position": {
            "x": 0.09059113351012127,
            "y": 1.2228274168484223,
            "z": 0.9183914752336867
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/missCount": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/missCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount"
        ],
        "label": "missCount",
        "text": "missCount",
        "color": "#F6E146",
        "additional": "missCount",
        "position": {
            "x": 0.06283496075176886,
            "y": 1.0174645301731515,
            "z": 0.9927589693101275
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/evictionCount": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.PolicyStats/memberField/evictionCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount"
        ],
        "label": "evictionCount",
        "text": "evictionCount",
        "color": "#F6E146",
        "additional": "evictionCount",
        "position": {
            "x": 0.03188355761954753,
            "y": 1.1736534350955359,
            "z": 0.9060042119708398
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/hitCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/hitCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/hitCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/hitCount"
        ],
        "label": "hitCount",
        "text": "hitCount",
        "color": "#F6E146",
        "additional": "hitCount",
        "position": {
            "x": 0.13051063111112127,
            "y": 1.165514380539397,
            "z": 0.8824046938403005
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/missCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/missCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/missCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/missCount"
        ],
        "label": "missCount",
        "text": "missCount",
        "color": "#F6E146",
        "additional": "missCount",
        "position": {
            "x": 0.12095662457966316,
            "y": 0.9538607409059661,
            "z": 0.9539333167544257
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadSuccessCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadSuccessCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadSuccessCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadSuccessCount"
        ],
        "label": "loadSuccessCount",
        "text": "loadSuccessCount",
        "color": "#F6E146",
        "additional": "loadSuccessCount",
        "position": {
            "x": 0.22455692410127104,
            "y": 1.0381963448330715,
            "z": 0.9227935687769748
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadFailureCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/loadFailureCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/loadFailureCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/loadFailureCount"
        ],
        "label": "loadFailureCount",
        "text": "loadFailureCount",
        "color": "#F6E146",
        "additional": "loadFailureCount",
        "position": {
            "x": 0.17559928920902435,
            "y": 0.9711652563634413,
            "z": 0.8964525748803097
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/totalLoadTime": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/totalLoadTime",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/totalLoadTime",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/totalLoadTime"
        ],
        "label": "totalLoadTime",
        "text": "totalLoadTime",
        "color": "#F6E146",
        "additional": "totalLoadTime",
        "position": {
            "x": 0.1961067285695164,
            "y": 1.1330598912558238,
            "z": 0.934547953037978
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionCount": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionCount",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionCount",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionCount"
        ],
        "label": "evictionCount",
        "text": "evictionCount",
        "color": "#F6E146",
        "additional": "evictionCount",
        "position": {
            "x": 0.07198674811352168,
            "y": 1.1166705545495166,
            "z": 0.875574644272167
        }
    },
    "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionWeight": {
        "id": "com.github.benmanes.caffeine.cache.stats.CacheStats/memberField/evictionWeight",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.stats.CacheStats/method/of(long hitCount, long missCount, long loadSuccessCount, long loadFailureCount, long totalLoadTime, long evictionCount, long evictionWeight)/parameter/evictionWeight",
            "com.github.benmanes.caffeine.cache.stats.CacheStatsTest/method/checkStats(com.github.benmanes.caffeine.cache.stats.CacheStats stats, long requestCount, long hitCount, double hitRate, long missCount, double missRate, long loadSuccessCount, long loadFailureCount, double loadFailureRate, long loadCount, long totalLoadTime, double averageLoadPenalty, long evictionCount, long evictionWeight)/parameter/evictionWeight"
        ],
        "label": "evictionWeight",
        "text": "evictionWeight",
        "color": "#F6E146",
        "additional": "evictionWeight",
        "position": {
            "x": 0.07511676368708686,
            "y": 1.0437528175945516,
            "z": 0.9593416464805566
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.7752823868851735,
            "y": 1.7047151059950107,
            "z": 1.2770098809960913
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.7497953197534111,
            "y": 1.6743183445038268,
            "z": 1.2683850673718418
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 0.735623180332512,
            "y": 1.7577418129492637,
            "z": 1.2214623766347548
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 0.7041921672936102,
            "y": 1.7757141514305492,
            "z": 1.2371524169188006
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.7554747610922594,
            "y": 1.7644489786983604,
            "z": 1.3489054536359926
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.7766593757917937,
            "y": 1.7861756847841872,
            "z": 1.3248945269056933
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.7788898496466088,
            "y": 1.695677456240005,
            "z": 1.3068870612330428
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 0.7274305396957557,
            "y": 1.7227969264924845,
            "z": 1.2380441456795857
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.7266956725170082,
            "y": 1.8244247951702628,
            "z": 1.3311870863564357
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.7502892105495163,
            "y": 1.6835124804632202,
            "z": 1.3217359757687308
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 0.7639676929830512,
            "y": 1.7623668101540704,
            "z": 1.2474912452731348
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.7598158866942586,
            "y": 1.823509235084652,
            "z": 1.3172185626061925
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.7354207149480632,
            "y": 1.6626422326625196,
            "z": 1.295572642982543
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": 0.7392168928910972,
            "y": 1.8010031602981242,
            "z": 1.2458434127856703
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemoved(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishCreated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishRemovedQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpiredQuietly(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value",
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishExpired(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V value)/parameter/value"
        ],
        "label": "value",
        "text": "value",
        "color": "#F6E146",
        "additional": "value",
        "position": {
            "x": 0.7364889451650285,
            "y": 1.7981290243783987,
            "z": 1.355640699574902
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.19271021503622932,
            "y": 2.037675275028678,
            "z": 1.4813009166097366
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.19752699060465229,
            "y": 2.0604087177771904,
            "z": 1.448616614017872
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.2109909239625477,
            "y": 1.9871259321167667,
            "z": 1.4297554012211404
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.2160376273712602,
            "y": 2.021488541826391,
            "z": 1.4549356521295849
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue"
        ],
        "label": "oldValue",
        "text": "oldValue",
        "color": "#F6E146",
        "additional": "oldValue",
        "position": {
            "x": -0.213401743139216,
            "y": 2.0166549720020184,
            "z": 1.4813037763636017
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/oldValue",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/oldValue"
        ],
        "label": "oldValue",
        "text": "oldValue",
        "color": "#F6E146",
        "additional": "oldValue",
        "position": {
            "x": -0.21481366847843364,
            "y": 1.9802655812454388,
            "z": 1.458657413241922
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue"
        ],
        "label": "newValue",
        "text": "newValue",
        "color": "#F6E146",
        "additional": "newValue",
        "position": {
            "x": -0.22212780661702414,
            "y": 2.053606357503127,
            "z": 1.447285799579167
        }
    },
    "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue": {
        "id": "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publish(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, com.github.benmanes.caffeine.jcache.event.javax.cache.event.EventType eventType, K key, boolean hasOldValue, V oldValue, V newValue, boolean quiet)/parameter/newValue",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.jcache.event.EventDispatcher/method/publishUpdated(com.github.benmanes.caffeine.jcache.event.javax.cache.Cache<K, V> cache, K key, V oldValue, V newValue)/parameter/newValue"
        ],
        "label": "newValue",
        "text": "newValue",
        "color": "#F6E146",
        "additional": "newValue",
        "position": {
            "x": -0.2222219325148892,
            "y": 2.018276165293896,
            "z": 1.4234797705837274
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason"
        ],
        "label": "reason",
        "text": "reason",
        "color": "#F6E146",
        "additional": "reason",
        "position": {
            "x": 0.6004409903520649,
            "y": 1.799505447286436,
            "z": 0.7453010050420992
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/reason"
        ],
        "label": "reason",
        "text": "reason",
        "color": "#F6E146",
        "additional": "reason",
        "position": {
            "x": 0.6301521815437026,
            "y": 1.8204118149564186,
            "z": 0.764380069589873
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual"
        ],
        "label": "actual",
        "text": "actual",
        "color": "#F6E146",
        "additional": "actual",
        "position": {
            "x": 0.6576758750445633,
            "y": 1.699646023086545,
            "z": 0.7777992650469641
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/actual"
        ],
        "label": "actual",
        "text": "actual",
        "color": "#F6E146",
        "additional": "actual",
        "position": {
            "x": 0.6823798087980633,
            "y": 1.7296940025660743,
            "z": 0.757527966509423
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher"
        ],
        "label": "matcher",
        "text": "matcher",
        "color": "#F6E146",
        "additional": "matcher",
        "position": {
            "x": 0.6022832125646036,
            "y": 1.733068530481206,
            "z": 0.7257472700230868
        }
    },
    "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher": {
        "id": "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/expectThat(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.testing.DescriptionBuilder/method/addError(java.lang.String reason, T actual, com.github.benmanes.caffeine.testing.org.hamcrest.Matcher<? super T> matcher)/parameter/matcher"
        ],
        "label": "matcher",
        "text": "matcher",
        "color": "#F6E146",
        "additional": "matcher",
        "position": {
            "x": 0.6192305875071982,
            "y": 1.694297654228822,
            "z": 0.7460736898181557
        }
    },
    "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/NUM_PRODUCERS": {
        "id": "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/NUM_PRODUCERS",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/NUM_PRODUCERS"
        ],
        "label": "NUM_PRODUCERS",
        "text": "NUM_PRODUCERS",
        "color": "#F6E146",
        "additional": "NUM_PRODUCERS",
        "position": {
            "x": 0.8877346701192097,
            "y": 2.145337138627032,
            "z": 1.1374699000605957
        }
    },
    "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/NUM_PRODUCERS": {
        "id": "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/NUM_PRODUCERS",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/NUM_PRODUCERS"
        ],
        "label": "NUM_PRODUCERS",
        "text": "NUM_PRODUCERS",
        "color": "#F6E146",
        "additional": "NUM_PRODUCERS",
        "position": {
            "x": 0.8622856830865753,
            "y": 2.1898832644863226,
            "z": 1.1589535698743312
        }
    },
    "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/POPULATED_SIZE": {
        "id": "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/POPULATED_SIZE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/POPULATED_SIZE"
        ],
        "label": "POPULATED_SIZE",
        "text": "POPULATED_SIZE",
        "color": "#F6E146",
        "additional": "POPULATED_SIZE",
        "position": {
            "x": 0.8225898326516361,
            "y": 2.123216450960039,
            "z": 1.0810332826262223
        }
    },
    "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/POPULATED_SIZE": {
        "id": "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/POPULATED_SIZE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/POPULATED_SIZE"
        ],
        "label": "POPULATED_SIZE",
        "text": "POPULATED_SIZE",
        "color": "#F6E146",
        "additional": "POPULATED_SIZE",
        "position": {
            "x": 0.796453094557513,
            "y": 2.16771143507901,
            "z": 1.1017334861325718
        }
    },
    "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/PRODUCE": {
        "id": "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/PRODUCE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/PRODUCE"
        ],
        "label": "PRODUCE",
        "text": "PRODUCE",
        "color": "#F6E146",
        "additional": "PRODUCE",
        "position": {
            "x": 0.8476617367644652,
            "y": 2.083511091215663,
            "z": 1.1626894323846289
        }
    },
    "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/PRODUCE": {
        "id": "com.github.benmanes.caffeine.cache.MpscGrowableArrayQueueTest/memberField/PRODUCE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.SingleConsumerQueueTest/memberField/PRODUCE"
        ],
        "label": "PRODUCE",
        "text": "PRODUCE",
        "color": "#F6E146",
        "additional": "PRODUCE",
        "position": {
            "x": 0.8210144062506486,
            "y": 2.128123954496677,
            "z": 1.1830638501159647
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/UNSAFE": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/UNSAFE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/UNSAFE"
        ],
        "label": "UNSAFE",
        "text": "UNSAFE",
        "color": "#F6E146",
        "additional": "UNSAFE",
        "position": {
            "x": 0.48721478333493207,
            "y": 1.4194150458202643,
            "z": 2.353751776770754
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/UNSAFE": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/UNSAFE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/UNSAFE"
        ],
        "label": "UNSAFE",
        "text": "UNSAFE",
        "color": "#F6E146",
        "additional": "UNSAFE",
        "position": {
            "x": 0.4913561790123522,
            "y": 1.3650656663290675,
            "z": 2.3735397780728804
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/ANDROID": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/ANDROID",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/ANDROID"
        ],
        "label": "ANDROID",
        "text": "ANDROID",
        "color": "#F6E146",
        "additional": "ANDROID",
        "position": {
            "x": 0.4123578327754198,
            "y": 1.3966507609440384,
            "z": 2.3382675820280694
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/ANDROID": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/ANDROID",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/ANDROID"
        ],
        "label": "ANDROID",
        "text": "ANDROID",
        "color": "#F6E146",
        "additional": "ANDROID",
        "position": {
            "x": 0.41434969102991537,
            "y": 1.3422293062319255,
            "z": 2.3583097114199045
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/OPEN_JDK": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/OPEN_JDK",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/OPEN_JDK"
        ],
        "label": "OPEN_JDK",
        "text": "OPEN_JDK",
        "color": "#F6E146",
        "additional": "OPEN_JDK",
        "position": {
            "x": 0.4345485673304892,
            "y": 1.4769092089560067,
            "z": 2.4125006242754874
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/OPEN_JDK": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccess/memberField/OPEN_JDK",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccess/memberField/OPEN_JDK"
        ],
        "label": "OPEN_JDK",
        "text": "OPEN_JDK",
        "color": "#F6E146",
        "additional": "OPEN_JDK",
        "position": {
            "x": 0.43595365561951716,
            "y": 1.4215098318039694,
            "z": 2.4315115813081176
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/lvalue": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/lvalue",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/lvalue"
        ],
        "label": "lvalue",
        "text": "lvalue",
        "color": "#F6E146",
        "additional": "lvalue",
        "position": {
            "x": -0.6339968011066413,
            "y": 0.972952588091736,
            "z": 1.9619738138044485
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/lvalue": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/lvalue",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/lvalue"
        ],
        "label": "lvalue",
        "text": "lvalue",
        "color": "#F6E146",
        "additional": "lvalue",
        "position": {
            "x": -0.6291096659400539,
            "y": 0.929256398992456,
            "z": 1.9284872982017154
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET"
        ],
        "label": "LVALUE_OFFSET",
        "text": "LVALUE_OFFSET",
        "color": "#F6E146",
        "additional": "LVALUE_OFFSET",
        "position": {
            "x": -0.7358003692714962,
            "y": 0.9501543169172075,
            "z": 1.9767655427075654
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/LVALUE_OFFSET"
        ],
        "label": "LVALUE_OFFSET",
        "text": "LVALUE_OFFSET",
        "color": "#F6E146",
        "additional": "LVALUE_OFFSET",
        "position": {
            "x": -0.7287714670238201,
            "y": 0.9067588248157166,
            "z": 1.943037083044
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET"
        ],
        "label": "IVALUE_OFFSET",
        "text": "IVALUE_OFFSET",
        "color": "#F6E146",
        "additional": "IVALUE_OFFSET",
        "position": {
            "x": -0.6632156106893079,
            "y": 0.9194275225008326,
            "z": 1.998472407998736
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/IVALUE_OFFSET"
        ],
        "label": "IVALUE_OFFSET",
        "text": "IVALUE_OFFSET",
        "color": "#F6E146",
        "additional": "IVALUE_OFFSET",
        "position": {
            "x": -0.6572339772996416,
            "y": 0.8748074088616671,
            "z": 1.9652409004599247
        }
    },
    "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/ivalue": {
        "id": "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/ivalue",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/ivalue"
        ],
        "label": "ivalue",
        "text": "ivalue",
        "color": "#F6E146",
        "additional": "ivalue",
        "position": {
            "x": -0.7098212145019416,
            "y": 1.007243769181638,
            "z": 1.9293105834159756
        }
    },
    "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/ivalue": {
        "id": "com.github.benmanes.caffeine.cache.UnsafeAccessTest.RelaxedFields/memberField/ivalue",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.base.UnsafeAccessTest.RelaxedFields/memberField/ivalue"
        ],
        "label": "ivalue",
        "text": "ivalue",
        "color": "#F6E146",
        "additional": "ivalue",
        "position": {
            "x": -0.7047631906076435,
            "y": 0.9629634812837723,
            "z": 1.8957051016059325
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/memberField/initialCapacity": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/memberField/initialCapacity",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/initialCapacity"
        ],
        "label": "initialCapacity",
        "text": "initialCapacity",
        "color": "#F6E146",
        "additional": "initialCapacity",
        "position": {
            "x": 0.08075693084266744,
            "y": 1.4714604129205402,
            "z": 1.180547690911393
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/initialCapacity": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/initialCapacity",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/initialCapacity"
        ],
        "label": "initialCapacity",
        "text": "initialCapacity",
        "color": "#F6E146",
        "additional": "initialCapacity",
        "position": {
            "x": 0.007586185390924927,
            "y": 1.4531265643974,
            "z": 1.1471198072979072
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumSize": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumSize",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumSize"
        ],
        "label": "maximumSize",
        "text": "maximumSize",
        "color": "#F6E146",
        "additional": "maximumSize",
        "position": {
            "x": 0.09404060240453971,
            "y": 1.4437705140774681,
            "z": 1.1599943600598128
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumSize": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumSize",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumSize"
        ],
        "label": "maximumSize",
        "text": "maximumSize",
        "color": "#F6E146",
        "additional": "maximumSize",
        "position": {
            "x": 0.022631864572201232,
            "y": 1.4228551605480058,
            "z": 1.1238928792553136
        }
    },
    "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumWeight": {
        "id": "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumWeight",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumWeight"
        ],
        "label": "maximumWeight",
        "text": "maximumWeight",
        "color": "#F6E146",
        "additional": "maximumWeight",
        "position": {
            "x": 0.08168528922558571,
            "y": 1.4210857716159087,
            "z": 1.1884890758353537
        }
    },
    "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumWeight": {
        "id": "com.github.benmanes.caffeine.cache.CaffeineSpec/memberField/maximumWeight",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.Caffeine/memberField/maximumWeight"
        ],
        "label": "maximumWeight",
        "text": "maximumWeight",
        "color": "#F6E146",
        "additional": "maximumWeight",
        "position": {
            "x": 0.008280972313424284,
            "y": 1.3966119770305792,
            "z": 1.1571999824993413
        }
    },
    "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/MASK",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK",
        "position": {
            "x": 0.7220905961298607,
            "y": 1.8447523783746693,
            "z": 1.706279074505824
        }
    },
    "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/MASK",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK",
        "position": {
            "x": 0.7219751195881032,
            "y": 1.8971940448609748,
            "z": 1.7282044973218527
        }
    },
    "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/SIZE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE",
        "position": {
            "x": 0.6506151048844622,
            "y": 1.869117768488109,
            "z": 1.6860680489649245
        }
    },
    "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/SIZE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE",
        "position": {
            "x": 0.6504800297554831,
            "y": 1.9234537292726728,
            "z": 1.7059427907083098
        }
    },
    "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/ITEMS",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS",
        "position": {
            "x": 0.6490530613250156,
            "y": 1.7920882550169361,
            "z": 1.7591514526217402
        }
    },
    "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.profiler.CacheProfiler/memberField/ITEMS",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.ComputeBenchmark/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS",
        "position": {
            "x": 0.6501442581726742,
            "y": 1.8450259409657819,
            "z": 1.779638401530865
        }
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS",
        "position": {
            "x": -0.25114297548270204,
            "y": 1.2372092783245368,
            "z": 2.1732102238618576
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS",
        "position": {
            "x": -0.2945296580025033,
            "y": 1.2130111089867104,
            "z": 2.175552543144822
        }
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints"
        ],
        "label": "ints",
        "text": "ints",
        "color": "#F6E146",
        "additional": "ints",
        "position": {
            "x": -0.3099294648351013,
            "y": 1.3595866088800057,
            "z": 2.259864397654929
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints"
        ],
        "label": "ints",
        "text": "ints",
        "color": "#F6E146",
        "additional": "ints",
        "position": {
            "x": -0.35106484953560313,
            "y": 1.3269098227756007,
            "z": 2.2513916381844243
        }
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK",
        "position": {
            "x": -0.27030508823584887,
            "y": 1.422491439253029,
            "z": 2.204347891333061
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK",
        "position": {
            "x": -0.31035632076027486,
            "y": 1.3858559346393426,
            "z": 2.1923380741822425
        }
    },
    "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE",
        "position": {
            "x": -0.3261275237630098,
            "y": 1.2149067321473943,
            "z": 2.155999362180853
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE",
        "position": {
            "x": -0.3693014871862903,
            "y": 1.1871823677123192,
            "z": 2.1527534550820806
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ITEMS",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ITEMS",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ITEMS"
        ],
        "label": "ITEMS",
        "text": "ITEMS",
        "color": "#F6E146",
        "additional": "ITEMS",
        "position": {
            "x": -0.29448904906689355,
            "y": 1.2721733103813953,
            "z": 2.1574952853509837
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/ints",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/ints",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/ints"
        ],
        "label": "ints",
        "text": "ints",
        "color": "#F6E146",
        "additional": "ints",
        "position": {
            "x": -0.355573826988145,
            "y": 1.3856547918164341,
            "z": 2.242185139462615
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/MASK",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/MASK",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/MASK"
        ],
        "label": "MASK",
        "text": "MASK",
        "color": "#F6E146",
        "additional": "MASK",
        "position": {
            "x": -0.317100584083456,
            "y": 1.4432936446802467,
            "z": 2.1883347442618453
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/SIZE",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.FrequencySketchBenchmark/memberField/SIZE",
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/SIZE"
        ],
        "label": "SIZE",
        "text": "SIZE",
        "color": "#F6E146",
        "additional": "SIZE",
        "position": {
            "x": -0.3657867934264609,
            "y": 1.2437761696823963,
            "z": 2.133434770432149
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cacheType": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cacheType",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cacheType"
        ],
        "label": "cacheType",
        "text": "cacheType",
        "color": "#F6E146",
        "additional": "cacheType",
        "position": {
            "x": -0.4265736582956188,
            "y": 1.295402424450625,
            "z": 2.196462962189976
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cacheType": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cacheType",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cacheType"
        ],
        "label": "cacheType",
        "text": "cacheType",
        "color": "#F6E146",
        "additional": "cacheType",
        "position": {
            "x": -0.43088564481967895,
            "y": 1.3532487652614813,
            "z": 2.181893574176545
        }
    },
    "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cache": {
        "id": "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.4182042586918402,
            "y": 1.2814255294606627,
            "z": 2.148357380932134
        }
    },
    "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cache": {
        "id": "com.github.benmanes.caffeine.cache.PutRemoveBenchmark/memberField/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.GetPutBenchmark/memberField/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.42158247014096784,
            "y": 1.338677704221929,
            "z": 2.133740897897924
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/timeZone": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/timeZone",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/timeZone"
        ],
        "label": "timeZone",
        "text": "timeZone",
        "color": "#F6E146",
        "additional": "timeZone",
        "position": {
            "x": -0.46666750788679534,
            "y": 1.391265099594735,
            "z": 0.594370101828
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/timeZone": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/timeZone",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/timeZone"
        ],
        "label": "timeZone",
        "text": "timeZone",
        "color": "#F6E146",
        "additional": "timeZone",
        "position": {
            "x": -0.4604177449788235,
            "y": 1.3350202951104841,
            "z": 0.6143650413145326
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/directory": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/directory",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/directory"
        ],
        "label": "directory",
        "text": "directory",
        "color": "#F6E146",
        "additional": "directory",
        "position": {
            "x": -0.4394036456818954,
            "y": 1.3988710223658174,
            "z": 0.64415933686875
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/directory": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/directory",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/directory"
        ],
        "label": "directory",
        "text": "directory",
        "color": "#F6E146",
        "additional": "directory",
        "position": {
            "x": -0.4385116020127453,
            "y": 1.3430060391068759,
            "z": 0.6667557473307744
        }
    },
    "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/featureByIndex": {
        "id": "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/featureByIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/featureByIndex"
        ],
        "label": "featureByIndex",
        "text": "featureByIndex",
        "color": "#F6E146",
        "additional": "featureByIndex",
        "position": {
            "x": -0.3685672332504304,
            "y": 1.428131597735476,
            "z": 0.6241520296615926
        }
    },
    "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/featureByIndex": {
        "id": "com.github.benmanes.caffeine.cache.NodeFactoryGenerator/memberField/featureByIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.LocalCacheFactoryGenerator/memberField/featureByIndex"
        ],
        "label": "featureByIndex",
        "text": "featureByIndex",
        "color": "#F6E146",
        "additional": "featureByIndex",
        "position": {
            "x": -0.36756327554876667,
            "y": 1.3719427388210437,
            "z": 0.6445350581430509
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet"
        ],
        "label": "itemsPerSet",
        "text": "itemsPerSet",
        "color": "#F6E146",
        "additional": "itemsPerSet",
        "position": {
            "x": 0.016672735483095114,
            "y": 0.9765119654693932,
            "z": 1.6625581867959003
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet"
        ],
        "label": "itemsPerSet",
        "text": "itemsPerSet",
        "color": "#F6E146",
        "additional": "itemsPerSet",
        "position": {
            "x": -0.011530808752038935,
            "y": 0.9626241779353958,
            "z": 1.6290844087933396
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc"
        ],
        "label": "hashFunc",
        "text": "hashFunc",
        "color": "#F6E146",
        "additional": "hashFunc",
        "position": {
            "x": 0.11115540843937,
            "y": 1.0100554124110332,
            "z": 1.7233160123286795
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc"
        ],
        "label": "hashFunc",
        "text": "hashFunc",
        "color": "#F6E146",
        "additional": "hashFunc",
        "position": {
            "x": 0.08739432432393146,
            "y": 0.9843693321020162,
            "z": 1.6889330856940687
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": 0.05359402181404671,
            "y": 1.1811431133770274,
            "z": 1.6761426836915385
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": 0.03186385048347162,
            "y": 1.1546531114423737,
            "z": 1.6416480374727724
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd"
        ],
        "label": "rnd",
        "text": "rnd",
        "color": "#F6E146",
        "additional": "rnd",
        "position": {
            "x": 0.08836135356109143,
            "y": 1.0757497964725071,
            "z": 1.7742664053478387
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd"
        ],
        "label": "rnd",
        "text": "rnd",
        "color": "#F6E146",
        "additional": "rnd",
        "position": {
            "x": 0.06432816815288889,
            "y": 1.048070136823109,
            "z": 1.740459624890185
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex"
        ],
        "label": "lastIndex",
        "text": "lastIndex",
        "color": "#F6E146",
        "additional": "lastIndex",
        "position": {
            "x": 0.10118231069735129,
            "y": 1.164014923832473,
            "z": 1.7365091984125367
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex"
        ],
        "label": "lastIndex",
        "text": "lastIndex",
        "color": "#F6E146",
        "additional": "lastIndex",
        "position": {
            "x": 0.07780350233240507,
            "y": 1.1470929606993958,
            "z": 1.7013985013985653
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/itemsPerSet",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/itemsPerSet",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/itemsPerSet"
        ],
        "label": "itemsPerSet",
        "text": "itemsPerSet",
        "color": "#F6E146",
        "additional": "itemsPerSet",
        "position": {
            "x": -0.02556218316593184,
            "y": 0.9584615697396814,
            "z": 1.6736369191296931
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/cache": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": 0.03805100991156829,
            "y": 1.1071862874171767,
            "z": 1.7411401965806488
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/cache": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/cache",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/cache"
        ],
        "label": "cache",
        "text": "cache",
        "color": "#F6E146",
        "additional": "cache",
        "position": {
            "x": -0.003451438957385755,
            "y": 1.0870335942079623,
            "z": 1.7489292460489887
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/hashFunc",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/hashFunc",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/hashFunc"
        ],
        "label": "hashFunc",
        "text": "hashFunc",
        "color": "#F6E146",
        "additional": "hashFunc",
        "position": {
            "x": 0.07113688717196243,
            "y": 0.976804766240301,
            "z": 1.7337887039097084
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/chainIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/chainIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/chainIndex"
        ],
        "label": "chainIndex",
        "text": "chainIndex",
        "color": "#F6E146",
        "additional": "chainIndex",
        "position": {
            "x": 0.011173408327374679,
            "y": 1.1533055405352695,
            "z": 1.6843162279593225
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/rnd",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/rnd",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/rnd"
        ],
        "label": "rnd",
        "text": "rnd",
        "color": "#F6E146",
        "additional": "rnd",
        "position": {
            "x": 0.045615588788001205,
            "y": 1.0478465233909633,
            "z": 1.784033669757841
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex": {
        "id": "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheWithGhostCache/memberField/lastIndex",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCache/memberField/lastIndex",
            "com.github.benmanes.caffeine.cache.simulator.admission.tinycache.TinyCacheSketch/memberField/lastIndex"
        ],
        "label": "lastIndex",
        "text": "lastIndex",
        "color": "#F6E146",
        "additional": "lastIndex",
        "position": {
            "x": 0.05873492258837021,
            "y": 1.1483621993184312,
            "z": 1.7475820444673078
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter"
        ],
        "label": "isInFilter",
        "text": "isInFilter",
        "color": "#F6E146",
        "additional": "isInFilter",
        "position": {
            "x": -0.7631584076626249,
            "y": 1.5835705317159439,
            "z": 1.0313398270302228
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter"
        ],
        "label": "isInFilter",
        "text": "isInFilter",
        "color": "#F6E146",
        "additional": "isInFilter",
        "position": {
            "x": -0.7469872744220531,
            "y": 1.5323106632888577,
            "z": 1.0219037618380877
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain"
        ],
        "label": "isInMain",
        "text": "isInMain",
        "color": "#F6E146",
        "additional": "isInMain",
        "position": {
            "x": -0.7457227167211672,
            "y": 1.7417438678683432,
            "z": 0.9482493091443476
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain"
        ],
        "label": "isInMain",
        "text": "isInMain",
        "color": "#F6E146",
        "additional": "isInMain",
        "position": {
            "x": -0.7378899922582968,
            "y": 1.6843281507834411,
            "z": 0.9358758513485257
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.7677146083039834,
            "y": 1.7969094445641762,
            "z": 1.0315722358727513
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.7461715897888384,
            "y": 1.7447321770883357,
            "z": 1.0326454688847333
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInFilter",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInFilter",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInFilter"
        ],
        "label": "isInFilter",
        "text": "isInFilter",
        "color": "#F6E146",
        "additional": "isInFilter",
        "position": {
            "x": -0.7242292186551773,
            "y": 1.5724734378276763,
            "z": 0.9980234272412655
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/isInMain",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/isInMain",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/isInMain"
        ],
        "label": "isInMain",
        "text": "isInMain",
        "color": "#F6E146",
        "additional": "isInMain",
        "position": {
            "x": -0.7104269048064036,
            "y": 1.7279844871302397,
            "z": 0.9173793377257939
        }
    },
    "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key": {
        "id": "com.github.benmanes.caffeine.cache.simulator.policy.irr.IndicatorFrdPolicy.Node/memberField/key",
        "size": 1,
        "edges": [
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.FrdPolicy.Node/memberField/key",
            "com.github.benmanes.caffeine.cache.simulator.policy.irr.HillClimberFrdPolicy.Node/memberField/key"
        ],
        "label": "key",
        "text": "key",
        "color": "#F6E146",
        "additional": "key",
        "position": {
            "x": -0.7292732292603652,
            "y": 1.7831283761835954,
            "z": 1.003479347501873
        }
    }
}